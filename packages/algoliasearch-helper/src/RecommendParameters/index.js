'use strict';

/**
 * RecommendParameters is the data structure that contains all the information
 * usable for getting recommendations from the Algolia API. It doesn't do the
 * search itself, nor does it contains logic about the parameters.
 * It is an immutable object, therefore it has been created in a way that each
 * changes does not change the object itself but returns a copy with the
 * modification.
 * This object should probably not be instantiated outside of the helper. It
 * will be provided when needed. This object is documented for reference as
 * you'll get it from events generated by the {@link AlgoliaSearchHelper}.
 * If need be, instantiate this from the factory function {@link RecommendParameters.make}.
 * @constructor
 * @classdesc contains all the parameters for recommendations
 * @param {PlainRecommendParametersWithId} newParameters existing parameters or
 * partial object for the properties of a new RecommendParameters
 * @see RecommendParameters.make
 */
function RecommendParameters(newParameters) {
  this.params = newParameters || [];
}

/**
 * Factory for RecommendParameters
 * @param {PlainRecommendParametersWithId} newParameters existing parameters or
 * partial object for the properties of a new RecommendParameters
 * @return {RecommendParameters} frozen instance of RecommendParameters
 */
RecommendParameters.make = function makeRecommendParameters(newParameters) {
  return new RecommendParameters(newParameters);
};

RecommendParameters.prototype = {
  constructor: RecommendParameters,

  addParams: function (params) {
    return new RecommendParameters(this.params.concat(params));
  },

  removeParams: function (id) {
    return new RecommendParameters(
      this.params.filter(function (param) {
        return param.$$id !== id;
      })
    );
  },

  toString: function () {
    return JSON.stringify(this, null, 2);
  },
};

module.exports = RecommendParameters;
