'use strict';

/**
 * RecommendParameters is the data structure that contains all the information
 * usable for making a search to Algolia API. It doesn't do the request itself,
 * nor does it contains logic about the parameters.
 * It is an immutable object, therefore it has been created in a way that each
 * changes does not change the object itself but returns a copy with the
 * modification.
 * This object should probably not be instantiated outside of the helper. It will
 * be provided when needed. This object is documented for reference as you'll
 * get it from events generated by the {@link AlgoliaSearchHelper}.
 * @constructor
 * @classdesc contains all the parameters for recommend
 * @param {object|RecommendParameters} newParameters existing parameters or partial object
 * for the properties of a new SearchParameters
}
 */
function RecommendParameters(newParameters) {
  this.params = newParameters || [];
}

RecommendParameters.prototype = {
  constructor: RecommendParameters,

  /**
   * Adds a request to fbt model
   * @method
   * @param {object} params fbt params
   * @return {RecommendParameters} new instance
   * @example
   * state.addFrequentlyBoughtTogether({ objectID});
   */
  addFrequentlyBoughtTogether: function (params) {
    return new RecommendParameters([
      ...this.params,
      { ...params, model: 'bought-together' },
    ]);
  },

  toString: function () {
    return JSON.stringify(this, null, 2);
  },
};

module.exports = RecommendParameters;
