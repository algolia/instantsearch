const { algoliasearch, instantsearch } = window;

const searchClient = algoliasearch('{{appId}}', '{{apiKey}}');

const search = instantsearch({
  indexName: '{{indexName}}',
  searchClient,
});

search.addWidgets([
  instantsearch.widgets.searchBox({
    container: '#searchbox',
    {{#if searchPlaceholder}}
    placeholder: '{{searchPlaceholder}}',
    {{/if}}
  }),
  instantsearch.widgets.hits({
    container: '#hits',
    {{#if attributesToDisplay}}
    templates: {
      item: (hit, { html, components }) => `
<article>
  <h1>${components.Highlight({hit, attribute: "{{attributesToDisplay.[0]}}"})}</h1>
  {{#each attributesToDisplay}}
  {{#unless @first}}
  <p>${components.Highlight({hit, attribute: "{{this}}"})}</p>
  {{/unless}}
  {{/each}}
</article>
`,
    },
    {{/if}}
  }),
  instantsearch.widgets.configure({
    hitsPerPage: 8,
  }),
  {{#if flags.dynamicWidgets}}
  instantsearch.widgets.dynamicWidgets({
    container: '#dynamic-widgets',
    fallbackWidget({ container, attribute }) {
      return instantsearch.widgets.panel({ templates: { header: () => attribute } })(
        instantsearch.widgets.refinementList
      )({
        container,
        attribute,
      });
    },
    widgets: [
      {{#each attributesForFaceting}}
      container =>
        instantsearch.widgets.panel({
          templates: { header: () => '{{this}}' },
        })(instantsearch.widgets.refinementList)({
          container,
          attribute: '{{this}}',
        }),
      {{/each}}
    ],
  }),
  {{else}}
  {{#each attributesForFaceting}}
  instantsearch.widgets.panel({
    templates: { header: () => '{{this}}' },
  })(instantsearch.widgets.refinementList)({
    container: '#{{this}}-list',
    attribute: '{{this}}',
  }),
  {{/each}}
  {{/if}}
  instantsearch.widgets.pagination({
    container: '#pagination',
  }),
]);

search.start();
