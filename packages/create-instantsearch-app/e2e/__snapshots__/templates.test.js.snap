// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Templates Angular InstantSearch File content: .browserslistrc 1`] = `
"# This file is used by the build system to adjust CSS and JS output to support the specified browsers below.
# For additional information regarding the format and rule options, please see:
# https://github.com/browserslist/browserslist#queries

# For the full list of supported browsers by the Angular framework, please see:
# https://angular.io/guide/browser-support

# You can see what browsers were selected by your queries by running:
#   npx browserslist

last 1 Chrome version
last 1 Firefox version
last 2 Edge major versions
last 2 Safari major versions
last 2 iOS major versions
Firefox ESR
not IE 11 # Angular supports IE 11 only as an opt-in. To opt-in, remove the 'not' prefix on this line."
`;

exports[`Templates Angular InstantSearch File content: .editorconfig 1`] = `
"# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false"
`;

exports[`Templates Angular InstantSearch File content: .gitignore 1`] = `
"node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
dist/"
`;

exports[`Templates Angular InstantSearch File content: README.md 1`] = `
"# angular-instantsearch-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates Angular InstantSearch File content: angular.json 1`] = `
"{
  \\"$schema\\": \\"./node_modules/@angular/cli/lib/config/schema.json\\",
  \\"version\\": 1,
  \\"newProjectRoot\\": \\"projects\\",
  \\"projects\\": {
    \\"angular-instantsearch-app\\": {
      \\"projectType\\": \\"application\\",
      \\"schematics\\": {
        \\"@schematics/angular:application\\": {
          \\"strict\\": true
        }
      },
      \\"root\\": \\"\\",
      \\"sourceRoot\\": \\"src\\",
      \\"prefix\\": \\"app\\",
      \\"architect\\": {
        \\"build\\": {
          \\"builder\\": \\"@angular-devkit/build-angular:browser\\",
          \\"options\\": {
            \\"outputPath\\": \\"dist/angular-instantsearch-app\\",
            \\"index\\": \\"src/index.html\\",
            \\"main\\": \\"src/main.ts\\",
            \\"polyfills\\": \\"src/polyfills.ts\\",
            \\"tsConfig\\": \\"tsconfig.app.json\\",
            \\"assets\\": [\\"src/favicon.ico\\", \\"src/assets\\"],
            \\"styles\\": [\\"src/styles.css\\"],
            \\"scripts\\": []
          },
          \\"configurations\\": {
            \\"production\\": {
              \\"budgets\\": [
                {
                  \\"type\\": \\"initial\\",
                  \\"maximumWarning\\": \\"500kb\\",
                  \\"maximumError\\": \\"1mb\\"
                },
                {
                  \\"type\\": \\"anyComponentStyle\\",
                  \\"maximumWarning\\": \\"2kb\\",
                  \\"maximumError\\": \\"4kb\\"
                }
              ],
              \\"fileReplacements\\": [
                {
                  \\"replace\\": \\"src/environments/environment.ts\\",
                  \\"with\\": \\"src/environments/environment.prod.ts\\"
                }
              ],
              \\"outputHashing\\": \\"all\\"
            },
            \\"development\\": {
              \\"buildOptimizer\\": false,
              \\"optimization\\": false,
              \\"vendorChunk\\": true,
              \\"extractLicenses\\": false,
              \\"sourceMap\\": true,
              \\"namedChunks\\": true
            }
          },
          \\"defaultConfiguration\\": \\"production\\"
        },
        \\"serve\\": {
          \\"builder\\": \\"@angular-devkit/build-angular:dev-server\\",
          \\"configurations\\": {
            \\"production\\": {
              \\"browserTarget\\": \\"angular-instantsearch-app:build:production\\"
            },
            \\"development\\": {
              \\"browserTarget\\": \\"angular-instantsearch-app:build:development\\"
            }
          },
          \\"defaultConfiguration\\": \\"development\\"
        },
        \\"extract-i18n\\": {
          \\"builder\\": \\"@angular-devkit/build-angular:extract-i18n\\",
          \\"options\\": {
            \\"browserTarget\\": \\"angular-instantsearch-app:build\\"
          }
        },
        \\"test\\": {
          \\"builder\\": \\"@angular-devkit/build-angular:karma\\",
          \\"options\\": {
            \\"main\\": \\"src/test.ts\\",
            \\"polyfills\\": \\"src/polyfills.ts\\",
            \\"tsConfig\\": \\"tsconfig.spec.json\\",
            \\"karmaConfig\\": \\"karma.conf.js\\",
            \\"assets\\": [\\"src/favicon.ico\\", \\"src/assets\\"],
            \\"styles\\": [
              \\"node_modules/instantsearch.css/themes/satellite.css\\",
              \\"src/styles.css\\"
            ],
            \\"scripts\\": []
          }
        }
      }
    }
  },
  \\"defaultProject\\": \\"angular-instantsearch-app\\"
}"
`;

exports[`Templates Angular InstantSearch File content: karma.conf.js 1`] = `
"// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html

module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma'),
    ],
    client: {
      jasmine: {
        // you can add configuration options for Jasmine here
        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
        // for example, you can disable the random execution with \`random: false\`
        // or set a specific seed with \`seed: 4321\`
      },
      clearContext: false, // leave Jasmine Spec Runner output visible in browser
    },
    jasmineHtmlReporter: {
      suppressAll: true, // removes the duplicated traces
    },
    coverageReporter: {
      dir: require('path').join(__dirname, './coverage/angular-instantsearch-app'),
      subdir: '.',
      reporters: [{ type: 'html' }, { type: 'text-summary' }],
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: ['Chrome'],
    singleRun: false,
    restartOnFileChange: true,
  });
};"
`;

exports[`Templates Angular InstantSearch File content: package.json 1`] = `
"{
  \\"name\\": \\"angular-instantsearch-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"scripts\\": {
    \\"ng\\": \\"ng\\",
    \\"start\\": \\"ng serve --port 3000\\",
    \\"build\\": \\"ng build\\",
    \\"watch\\": \\"ng build --watch --configuration development\\",
    \\"test\\": \\"ng test\\"
  },
  \\"private\\": true,
  \\"partialDependencies\\": {
    \\"angular-instantsearch\\": \\"4.0.0\\"
  }
}"
`;

exports[`Templates Angular InstantSearch File content: src/app/app.component.css 1`] = `
".header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(to right, #c3002f, #dd0031);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.search-panel {
  display: flex;
}

.search-panel__filters {
  flex: 1;
}

.search-panel__results {
  flex: 3;
}

.searchbox {
  margin-bottom: 2rem;
}

.pagination {
  margin: 2rem auto;
  text-align: center;
}"
`;

exports[`Templates Angular InstantSearch File content: src/app/app.component.html 1`] = `
"<header class=\\"header\\">
  <h1 class=\\"header-title\\">
    <a href=\\"/\\">angular-instantsearch-app</a>
  </h1>
  <p class=\\"header-subtitle\\">
    using
    <a href=\\"https://github.com/algolia/angular-instantsearch\\">
      Angular InstantSearch
    </a>
  </p>
</header>

<div class=\\"container\\">
  <ais-instantsearch [config]=\\"config\\">
    <ais-configure [searchParameters]=\\"{ hitsPerPage: 8 }\\"></ais-configure>
    <div class=\\"search-panel\\">
      <div class=\\"search-panel__filters\\">
        <ais-panel header=\\"facet1\\">
          <ais-refinement-list attribute=\\"facet1\\"></ais-refinement-list>
        </ais-panel>
        <ais-panel header=\\"facet2\\">
          <ais-refinement-list attribute=\\"facet2\\"></ais-refinement-list>
        </ais-panel>
      </div>

      <div class=\\"search-panel__results\\">
        <div class=\\"searchbox\\">
          <ais-search-box placeholder=\\"Search placeholder\\"></ais-search-box>
        </div>

        <ais-hits>
          <ng-template let-hits=\\"hits\\" let-results=\\"results\\">
            <div *ngIf=\\"hits.length === 0\\">
              No results found matching <strong></strong>.
            </div>

            <ol class=\\"ais-Hits-list\\">
              <li class=\\"ais-Hits-item\\" *ngFor=\\"let hit of hits\\">
                <article>
                  <h1>
                    <ais-highlight attribute=\\"attribute1\\" [hit]=\\"hit\\"></ais-highlight>
                  </h1>

                  <p>
                    <ais-highlight attribute=\\"attribute2\\" [hit]=\\"hit\\"></ais-highlight>
                  </p>
                </article>
              </li>
            </ol>
          </ng-template>
        </ais-hits>

        <div class=\\"pagination\\">
          <ais-pagination></ais-pagination>
        </div>
      </div>

    </div>
  </ais-instantsearch>
</div>"
`;

exports[`Templates Angular InstantSearch File content: src/app/app.component.ts 1`] = `
"import { Component } from '@angular/core';
import algoliasearch from 'algoliasearch/lite';

const searchClient = algoliasearch('appId', 'apiKey');

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  config = {
    indexName: 'indexName',
    searchClient,
  };
}"
`;

exports[`Templates Angular InstantSearch File content: src/app/app.module.ts 1`] = `
"import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { NgAisModule } from 'angular-instantsearch';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [NgAisModule.forRoot(), BrowserModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}"
`;

exports[`Templates Angular InstantSearch File content: src/assets/.gitkeep 1`] = `""`;

exports[`Templates Angular InstantSearch File content: src/environments/environment.prod.ts 1`] = `
"export const environment = {
  production: true,
};"
`;

exports[`Templates Angular InstantSearch File content: src/environments/environment.ts 1`] = `
"// This file can be replaced during build by using the \`fileReplacements\` array.
// \`ng build\` replaces \`environment.ts\` with \`environment.prod.ts\`.
// The list of file replacements can be found in \`angular.json\`.

export const environment = {
  production: false,
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as \`zone.run\`, \`zoneDelegate.invokeTask\`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI."
`;

exports[`Templates Angular InstantSearch File content: src/index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <title>angular-instantsearch-app</title>
    <base href=\\"/\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <link rel=\\"icon\\" type=\\"image/x-icon\\" href=\\"favicon.ico\\" />
    <link
      href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/satellite.css\\"
      rel=\\"stylesheet\\"
    />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>"
`;

exports[`Templates Angular InstantSearch File content: src/main.ts 1`] = `
"import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch((err) => console.error(err));"
`;

exports[`Templates Angular InstantSearch File content: src/polyfills.ts 1`] = `
"/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called \\"evergreen\\" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * IE11 requires the following for NgClass support on SVG elements
 */
// import 'classlist.js';  // Run \`npm install --save classlist.js\`.

/**
 * Web Animations \`@angular/platform-browser/animations\`
 * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
 * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
 */
// import 'web-animations-js';  // Run \`npm install --save web-animations-js\`.

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before \`zone.js\` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass \`zone.js\` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js'; // Included with Angular CLI.

/***************************************************************************************************
 * APPLICATION IMPORTS
 */

(window as any).process = {
  env: { DEBUG: undefined },
};"
`;

exports[`Templates Angular InstantSearch File content: src/styles.css 1`] = `
"/* You can add global styles to this file, and also import other style files */
body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}"
`;

exports[`Templates Angular InstantSearch File content: src/test.ts 1`] = `
"// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting,
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(
    path: string,
    deep?: boolean,
    filter?: RegExp
  ): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
  { teardown: { destroyAfterEach: true } }
);

// Then we find all the tests.
const context = require.context('./', true, /\\\\.spec\\\\.ts$/);
// And load the modules.
context.keys().map(context);"
`;

exports[`Templates Angular InstantSearch File content: tsconfig.app.json 1`] = `
"/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"./out-tsc/app\\",
    \\"types\\": []
  },
  \\"files\\": [
    \\"src/main.ts\\",
    \\"src/polyfills.ts\\"
  ],
  \\"include\\": [
    \\"src/**/*.d.ts\\"
  ]
}"
`;

exports[`Templates Angular InstantSearch File content: tsconfig.json 1`] = `
"/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  \\"compileOnSave\\": false,
  \\"compilerOptions\\": {
    \\"baseUrl\\": \\"./\\",
    \\"outDir\\": \\"./dist/out-tsc\\",
    \\"forceConsistentCasingInFileNames\\": true,
    \\"strict\\": true,
    \\"noImplicitReturns\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"sourceMap\\": true,
    \\"declaration\\": false,
    \\"downlevelIteration\\": true,
    \\"experimentalDecorators\\": true,
    \\"moduleResolution\\": \\"node\\",
    \\"esModuleInterop\\": true,
    \\"importHelpers\\": true,
    \\"target\\": \\"es2017\\",
    \\"module\\": \\"es2020\\",
    \\"lib\\": [
      \\"es2018\\",
      \\"dom\\"
    ],
    \\"allowSyntheticDefaultImports\\": true
  },
  \\"angularCompilerOptions\\": {
    \\"enableI18nLegacyMessageIdFormat\\": false,
    \\"strictInjectionParameters\\": true,
    \\"strictInputAccessModifiers\\": true,
    \\"strictTemplates\\": true
  }
}"
`;

exports[`Templates Angular InstantSearch File content: tsconfig.spec.json 1`] = `
"/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"./out-tsc/spec\\",
    \\"types\\": [
      \\"jasmine\\"
    ]
  },
  \\"files\\": [
    \\"src/test.ts\\",
    \\"src/polyfills.ts\\"
  ],
  \\"include\\": [
    \\"src/**/*.spec.ts\\",
    \\"src/**/*.d.ts\\"
  ]
}"
`;

exports[`Templates Angular InstantSearch Folder structure: contains the right files 1`] = `
Array [
  ".browserslistrc",
  ".editorconfig",
  ".gitignore",
  "README.md",
  "angular.json",
  "karma.conf.js",
  "package.json",
  "src/app/app.component.css",
  "src/app/app.component.html",
  "src/app/app.component.ts",
  "src/app/app.module.ts",
  "src/assets/.gitkeep",
  "src/environments/environment.prod.ts",
  "src/environments/environment.ts",
  "src/favicon.ico",
  "src/index.html",
  "src/main.ts",
  "src/polyfills.ts",
  "src/styles.css",
  "src/test.ts",
  "tsconfig.app.json",
  "tsconfig.json",
  "tsconfig.spec.json",
]
`;

exports[`Templates Autocomplete File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates Autocomplete File content: .eslintignore 1`] = `
"/node_modules
/dist
/.cache"
`;

exports[`Templates Autocomplete File content: .eslintrc.js 1`] = `
"/* eslint-disable import/no-commonjs */

module.exports = {
  extends: ['algolia', 'algolia/react'],
  settings: {
    react: {
      pragma: 'React',
      version: 'preact',
    },
  },
  rules: {
    'jsdoc/check-tag-names': [
      'error',
      {
        jsxTags: true,
      },
    ],
    'react/jsx-filename-extension': 'off',
  },
};"
`;

exports[`Templates Autocomplete File content: .gitignore 1`] = `
"# See https://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules

# testing
/coverage

# production
/dist
/.cache

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*"
`;

exports[`Templates Autocomplete File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates Autocomplete File content: README.md 1`] = `
"# autocomplete-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates Autocomplete File content: app.js 1`] = `
"/** @jsx h */
import { autocomplete, getAlgoliaResults } from '@algolia/autocomplete-js';
import algoliasearch from 'algoliasearch';
import { h } from 'preact';

import '@algolia/autocomplete-theme-classic';

const searchClient = algoliasearch('appId', 'apiKey');

autocomplete({
  container: '#autocomplete',
  placeholder: '',
  debug: true,
  getSources({ query }) {
    return [
      {
        sourceId: 'items',
        getItems() {
          return getAlgoliaResults({
            searchClient,
            queries: [
              {
                indexName: 'indexName',
                query,
              },
            ],
          });
        },
        templates: {
          item({ item, components }) {
            return (
              <div className=\\"aa-ItemWrapper\\">
                <div className=\\"aa-ItemContent\\">
                  <div className=\\"aa-ItemContentBody\\">
                    <div className=\\"aa-ItemContentTitle\\">
                      <components.Highlight
                        hit={item}
                        attribute=\\"attribute1\\"
                      />
                    </div>
                  </div>
                </div>
              </div>
            );
          },
          noResults() {
            return 'No matching items.';
          },
        },
      },
    ];
  },
});"
`;

exports[`Templates Autocomplete File content: index.html 1`] = `
"<html lang=\\"en\\">
  <head>
    <meta charset=\\"UTF-8\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />

    <link rel=\\"shortcut icon\\" href=\\"favicon.png\\" type=\\"image/x-icon\\" />
    <link rel=\\"stylesheet\\" href=\\"style.css\\" />

    <title>autocomplete-app</title>
  </head>

  <body>
    <div class=\\"container\\">
      <div id=\\"autocomplete\\"></div>
    </div>

    <script src=\\"app.js\\"></script>
  </body>
</html>"
`;

exports[`Templates Autocomplete File content: manifest.webmanifest 1`] = `
"{
  \\"short_name\\": \\"autocomplete-app\\",
  \\"name\\": \\"autocomplete-app Sample\\",
  \\"icons\\": [
    {
      \\"src\\": \\"favicon.png\\",
      \\"sizes\\": \\"64x64 32x32 24x24 16x16\\",
      \\"type\\": \\"image/x-icon\\"
    }
  ],
  \\"start_url\\": \\"./index.html\\",
  \\"display\\": \\"standalone\\",
  \\"theme_color\\": \\"#000000\\",
  \\"background_color\\": \\"#ffffff\\"
}"
`;

exports[`Templates Autocomplete File content: package.json 1`] = `
"{
  \\"name\\": \\"autocomplete-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"build\\": \\"parcel build index.html\\",
    \\"start\\": \\"parcel index.html --port 3000\\",
    \\"lint\\": \\"eslint .\\"
  },
  \\"keywords\\": [
    \\"algolia\\",
    \\"autocomplete\\",
    \\"javascript\\"
  ],
  \\"partialDependencies\\": {
    \\"@algolia/autocomplete-js\\": \\"1.0.0\\"
  }
}"
`;

exports[`Templates Autocomplete File content: style.css 1`] = `
"* {
  box-sizing: border-box;
}

body {
  background-color: rgb(244, 244, 249);
  color: rgb(65, 65, 65);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  padding: 1rem;
}

.container {
  margin: 0 auto;
  max-width: 640px;
  width: 100%;
}"
`;

exports[`Templates Autocomplete Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".eslintignore",
  ".eslintrc.js",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "app.js",
  "favicon.png",
  "index.html",
  "manifest.webmanifest",
  "package.json",
  "style.css",
]
`;

exports[`Templates InstantSearch Android File content: .gitignore 1`] = `
"# IDE Files
*.iml
.idea/*
projectFilesBackup

# Build
.gradle
/.idea/workspace.xml
/.idea/libraries
/build
/captures

# Local setup
/local.properties

# OS Files
.DS_Store"
`;

exports[`Templates InstantSearch Android File content: app/.gitignore 1`] = `"/build"`;

exports[`Templates InstantSearch Android File content: app/build.gradle 1`] = `
"apply plugin: 'com.android.application'

android {
    dataBinding.enabled true
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId \\"com.example.instantsearch.app\\"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName \\"1.0\\"
        testInstrumentationRunner \\"android.support.test.runner.AndroidJUnitRunner\\"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.algolia:instantsearch-android:1.12.1'
    testImplementation 'junit:junit:4.12'
}"
`;

exports[`Templates InstantSearch Android File content: app/proguard-rules.pro 1`] = `
"# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /Users/pln/Library/Android/sdk/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Add any project specific keep options here:

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile"
`;

exports[`Templates InstantSearch Android File content: app/src/androidTest/java/com/example/instantsearch/app/ExampleInstrumentedTest.java 1`] = `
"package com.example.instantsearch.app;

import android.content.Context;
import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumentation test, which will execute on an Android device.
 *
 * @see <a href=\\"http://d.android.com/tools/testing\\">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() throws Exception {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getTargetContext();

        assertEquals(\\"com.example.instantsearch.app\\", appContext.getPackageName());
    }
}"
`;

exports[`Templates InstantSearch Android File content: app/src/main/AndroidManifest.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<manifest package=\\"com.example.instantsearch.app\\"
          xmlns:android=\\"http://schemas.android.com/apk/res/android\\">

    <application
        android:allowBackup=\\"true\\"
        android:icon=\\"@mipmap/ic_launcher\\"
        android:label=\\"@string/app_name\\"
        android:roundIcon=\\"@mipmap/ic_launcher_round\\"
        android:supportsRtl=\\"true\\"
        android:theme=\\"@style/AppTheme\\">
        <activity android:name=\\".MainActivity\\">
            <intent-filter>
                <action android:name=\\"android.intent.action.MAIN\\"/>

                <category android:name=\\"android.intent.category.LAUNCHER\\"/>
            </intent-filter>
        </activity>
    </application>

</manifest>"
`;

exports[`Templates InstantSearch Android File content: app/src/main/java/com/example/instantsearch/app/MainActivity.java 1`] = `
"package com.example.instantsearch.app;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

import com.algolia.instantsearch.helpers.Searcher;
import com.algolia.instantsearch.helpers.InstantSearch;

public class MainActivity extends AppCompatActivity {
    private static final String ALGOLIA_APP_ID = \\"appId\\";
    private static final String ALGOLIA_SEARCH_API_KEY = \\"apiKey\\";
    private static final String ALGOLIA_INDEX_NAME = \\"indexName\\";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        final Searcher searcher = Searcher.create(ALGOLIA_APP_ID, ALGOLIA_SEARCH_API_KEY, ALGOLIA_INDEX_NAME);
        final InstantSearch helper = new InstantSearch(this, searcher);
        helper.search(); // First empty search to display default results
    }
}"
`;

exports[`Templates InstantSearch Android File content: app/src/main/res/layout/activity_main.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<RelativeLayout
    android:id=\\"@+id/activity_main\\"
    xmlns:algolia=\\"http://schemas.android.com/apk/res-auto\\"
    xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
    xmlns:tools=\\"http://schemas.android.com/tools\\"
    android:layout_width=\\"match_parent\\"
    android:layout_height=\\"match_parent\\"
    android:orientation=\\"vertical\\"
    tools:context=\\"com.example.instantsearch.app.MainActivity\\">

    <com.algolia.instantsearch.ui.views.SearchBox
        android:id=\\"@+id/search_box\\"
        android:layout_width=\\"match_parent\\"
        android:layout_height=\\"wrap_content\\"
        android:layout_marginBottom=\\"16dp\\"/>

    <com.algolia.instantsearch.ui.views.Hits
        android:id=\\"@+id/hits\\"
        android:layout_width=\\"match_parent\\"
        android:layout_height=\\"wrap_content\\"
        android:layout_below=\\"@id/search_box\\"
        algolia:itemLayout=\\"@layout/hits_item\\"/>
</RelativeLayout>"
`;

exports[`Templates InstantSearch Android File content: app/src/main/res/layout/hits_item.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<layout
    xmlns:algolia=\\"http://schemas.android.com/apk/res-auto\\"
    xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
>

    <LinearLayout
        android:layout_width=\\"match_parent\\"
        android:layout_height=\\"wrap_content\\"
        android:orientation=\\"vertical\\"
        android:padding=\\"16dp\\"
    >

        <TextView
            android:id=\\"@+id/attribute1\\"
            android:layout_width=\\"wrap_content\\"
            android:layout_height=\\"wrap_content\\"
            android:text=\\"attribute1\\"
            android:textSize=\\"20sp\\"
            android:textStyle=\\"bold\\"
            algolia:attribute='@{\\"attribute1\\"}'
            algolia:highlightColor=\\"@color/colorAccent\\"
            algolia:highlighted=\\"@{true}\\"/>

        <TextView
            android:id=\\"@+id/attribute2\\"
            android:layout_width=\\"wrap_content\\"
            android:layout_height=\\"wrap_content\\"
            android:layout_marginTop=\\"16dp\\"
            android:text=\\"attribute2\\"
            android:textSize=\\"20sp\\"
            algolia:attribute='@{\\"attribute2\\"}'
            algolia:highlightColor=\\"@color/colorAccent\\"
            algolia:highlighted=\\"@{true}\\"
          />

          <TextView
            android:id=\\"@+id/description\\"
            android:layout_width=\\"wrap_content\\"
            android:layout_height=\\"wrap_content\\"
            android:layout_marginTop=\\"16dp\\"
            android:text=\\"description\\"
            android:textSize=\\"20sp\\"
            algolia:attribute='@{\\"description\\"}'
            algolia:highlightColor=\\"@color/colorAccent\\"
            algolia:highlighted=\\"@{true}\\"
        />
    </LinearLayout>
</layout>"
`;

exports[`Templates InstantSearch Android File content: app/src/main/res/values/colors.xml 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<resources>
    <color name=\\"colorPrimary\\">#3F51B5</color>
    <color name=\\"colorPrimaryDark\\">#303F9F</color>
    <color name=\\"colorAccent\\">#FF4081</color>
</resources>"
`;

exports[`Templates InstantSearch Android File content: app/src/main/res/values/strings.xml 1`] = `
"<resources>
    <string name=\\"app_name\\">instantsearch-android-app</string>
</resources>"
`;

exports[`Templates InstantSearch Android File content: app/src/main/res/values/styles.xml 1`] = `
"<resources>

    <!-- Base application theme. -->
    <style name=\\"AppTheme\\" parent=\\"Theme.AppCompat.Light.DarkActionBar\\">
        <!-- Customize your theme here. -->
        <item name=\\"colorPrimary\\">@color/colorPrimary</item>
        <item name=\\"colorPrimaryDark\\">@color/colorPrimaryDark</item>
        <item name=\\"colorAccent\\">@color/colorAccent</item>
    </style>

</resources>"
`;

exports[`Templates InstantSearch Android File content: build.gradle 1`] = `
"// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}"
`;

exports[`Templates InstantSearch Android File content: gradle.properties 1`] = `
"# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx1536m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true"
`;

exports[`Templates InstantSearch Android File content: gradle/wrapper/gradle-wrapper.properties 1`] = `
"#Tue Jul 03 16:02:11 CEST 2018
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\\\\://services.gradle.org/distributions/gradle-5.6-all.zip"
`;

exports[`Templates InstantSearch Android File content: gradlew 1`] = `
"#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=\\"\\"

APP_NAME=\\"Gradle\\"
APP_BASE_NAME=\`basename \\"$0\\"\`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=\\"maximum\\"

warn ( ) {
    echo \\"$*\\"
}

die ( ) {
    echo
    echo \\"$*\\"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case \\"\`uname\`\\" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG=\\"$0\\"
# Need this for relative symlinks.
while [ -h \\"$PRG\\" ] ; do
    ls=\`ls -ld \\"$PRG\\"\`
    link=\`expr \\"$ls\\" : '.*-> \\\\(.*\\\\)$'\`
    if expr \\"$link\\" : '/.*' > /dev/null; then
        PRG=\\"$link\\"
    else
        PRG=\`dirname \\"$PRG\\"\`\\"/$link\\"
    fi
done
SAVED=\\"\`pwd\`\\"
cd \\"\`dirname \\\\\\"$PRG\\\\\\"\`/\\" >/dev/null
APP_HOME=\\"\`pwd -P\`\\"
cd \\"$SAVED\\" >/dev/null

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n \\"$JAVA_HOME\\" ] ; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
        JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
    if [ ! -x \\"$JAVACMD\\" ] ; then
        die \\"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation.\\"
    fi
else
    JAVACMD=\\"java\\"
    which java >/dev/null 2>&1 || die \\"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation.\\"
fi

# Increase the maximum file descriptors if we can.
if [ \\"$cygwin\\" = \\"false\\" -a \\"$darwin\\" = \\"false\\" ] ; then
    MAX_FD_LIMIT=\`ulimit -H -n\`
    if [ $? -eq 0 ] ; then
        if [ \\"$MAX_FD\\" = \\"maximum\\" -o \\"$MAX_FD\\" = \\"max\\" ] ; then
            MAX_FD=\\"$MAX_FD_LIMIT\\"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn \\"Could not set maximum file descriptor limit: $MAX_FD\\"
        fi
    else
        warn \\"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\\"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS=\\"$GRADLE_OPTS \\\\\\"-Xdock:name=$APP_NAME\\\\\\" \\\\\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\\\\"\\"
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=\`cygpath --path --mixed \\"$APP_HOME\\"\`
    CLASSPATH=\`cygpath --path --mixed \\"$CLASSPATH\\"\`
    JAVACMD=\`cygpath --unix \\"$JAVACMD\\"\`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=\`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null\`
    SEP=\\"\\"
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS=\\"$ROOTDIRS$SEP$dir\\"
        SEP=\\"|\\"
    done
    OURCYGPATTERN=\\"(^($ROOTDIRS))\\"
    # Add a user-defined pattern to the cygpath arguments
    if [ \\"$GRADLE_CYGPATTERN\\" != \\"\\" ] ; then
        OURCYGPATTERN=\\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\\"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in \\"$@\\" ; do
        CHECK=\`echo \\"$arg\\"|egrep -c \\"$OURCYGPATTERN\\" -\`
        CHECK2=\`echo \\"$arg\\"|egrep -c \\"^-\\"\`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval \`echo args$i\`=\`cygpath --path --ignore --mixed \\"$arg\\"\`
        else
            eval \`echo args$i\`=\\"\\\\\\"$arg\\\\\\"\\"
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- \\"$args0\\" ;;
        (2) set -- \\"$args0\\" \\"$args1\\" ;;
        (3) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" ;;
        (4) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" ;;
        (5) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" ;;
        (6) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" ;;
        (7) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" ;;
        (8) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" \\"$args7\\" ;;
        (9) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" \\"$args7\\" \\"$args8\\" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=(\\"$@\\")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[\${#JVM_OPTS[*]}]=\\"-Dorg.gradle.appname=$APP_BASE_NAME\\"

exec \\"$JAVACMD\\" \\"\${JVM_OPTS[@]}\\" -classpath \\"$CLASSPATH\\" org.gradle.wrapper.GradleWrapperMain \\"$@\\""
`;

exports[`Templates InstantSearch Android File content: gradlew.bat 1`] = `
"@if \\"%DEBUG%\\" == \\"\\" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if \\"%OS%\\"==\\"Windows_NT\\" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if \\"%DIRNAME%\\" == \\"\\" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if \\"%ERRORLEVEL%\\" == \\"0\\" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:\\"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist \\"%JAVA_EXE%\\" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not \\"%OS%\\" == \\"Windows_NT\\" goto win9xME_args
if \\"%@eval[2+2]\\" == \\"4\\" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if \\"x%~1\\" == \\"x\\" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\\\\gradle\\\\wrapper\\\\gradle-wrapper.jar

@rem Execute Gradle
\\"%JAVA_EXE%\\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \\"-Dorg.gradle.appname=%APP_BASE_NAME%\\" -classpath \\"%CLASSPATH%\\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if \\"%ERRORLEVEL%\\"==\\"0\\" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not \\"\\" == \\"%GRADLE_EXIT_CONSOLE%\\" exit 1
exit /b 1

:mainEnd
if \\"%OS%\\"==\\"Windows_NT\\" endlocal

:omega"
`;

exports[`Templates InstantSearch Android File content: settings.gradle 1`] = `"include ':app'"`;

exports[`Templates InstantSearch Android Folder structure: contains the right files 1`] = `
Array [
  ".gitignore",
  "app/.gitignore",
  "app/build.gradle",
  "app/proguard-rules.pro",
  "app/src/androidTest/java/com/example/instantsearch/app/ExampleInstrumentedTest.java",
  "app/src/main/AndroidManifest.xml",
  "app/src/main/java/com/example/instantsearch/app/MainActivity.java",
  "app/src/main/res/layout/activity_main.xml",
  "app/src/main/res/layout/hits_item.xml",
  "app/src/main/res/mipmap-hdpi/ic_launcher.png",
  "app/src/main/res/mipmap-hdpi/ic_launcher_round.png",
  "app/src/main/res/mipmap-mdpi/ic_launcher.png",
  "app/src/main/res/mipmap-mdpi/ic_launcher_round.png",
  "app/src/main/res/mipmap-xhdpi/ic_launcher.png",
  "app/src/main/res/mipmap-xhdpi/ic_launcher_round.png",
  "app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
  "app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png",
  "app/src/main/res/mipmap-xxxhdpi/ic_launcher.png",
  "app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png",
  "app/src/main/res/values/colors.xml",
  "app/src/main/res/values/strings.xml",
  "app/src/main/res/values/styles.xml",
  "build.gradle",
  "gradle.properties",
  "gradle/wrapper/gradle-wrapper.jar",
  "gradle/wrapper/gradle-wrapper.properties",
  "gradlew",
  "gradlew.bat",
  "settings.gradle",
]
`;

exports[`Templates InstantSearch iOS File content: .gitignore 1`] = `
"# Created by https://www.gitignore.io/api/swift

### Swift ###
# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

## Obj-C/Swift specific
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output


# End of https://www.gitignore.io/api/swift"
`;

exports[`Templates InstantSearch iOS File content: App.xcodeproj/project.pbxproj 1`] = `
"// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		94AAC2EA92803A83565D7073 /* Pods_App.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = E045BD52917EA4B39612E12B /* Pods_App.framework */; };
		E258C9271EE036970076097D /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = E258C9261EE036970076097D /* AppDelegate.swift */; };
		E258C9291EE036970076097D /* ViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = E258C9281EE036970076097D /* ViewController.swift */; };
		E258C92C1EE036970076097D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = E258C92A1EE036970076097D /* Main.storyboard */; };
		E258C92E1EE036970076097D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = E258C92D1EE036970076097D /* Assets.xcassets */; };
		E258C9311EE036970076097D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = E258C92F1EE036970076097D /* LaunchScreen.storyboard */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		7B3645EFB63597C820FD0759 /* Pods-App.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = \\"Pods-App.release.xcconfig\\"; path = \\"Pods/Target Support Files/Pods-App/Pods-App.release.xcconfig\\"; sourceTree = \\"<group>\\"; };
		B7E0369A70FFFFD97E30AF6C /* Pods-App.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = \\"Pods-App.debug.xcconfig\\"; path = \\"Pods/Target Support Files/Pods-App/Pods-App.debug.xcconfig\\"; sourceTree = \\"<group>\\"; };
		E045BD52917EA4B39612E12B /* Pods_App.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_App.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		E258C9231EE036970076097D /* App.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = \\"App.app\\"; sourceTree = BUILT_PRODUCTS_DIR; };
		E258C9261EE036970076097D /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = \\"<group>\\"; };
		E258C9281EE036970076097D /* ViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ViewController.swift; sourceTree = \\"<group>\\"; };
		E258C92B1EE036970076097D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = \\"<group>\\"; };
		E258C92D1EE036970076097D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = \\"<group>\\"; };
		E258C9301EE036970076097D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = \\"<group>\\"; };
		E258C9321EE036970076097D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = \\"<group>\\"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		E258C9201EE036970076097D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				94AAC2EA92803A83565D7073 /* Pods_App.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		5188048A03FF48C89161FB44 /* Pods */ = {
			isa = PBXGroup;
			children = (
				B7E0369A70FFFFD97E30AF6C /* Pods-App.debug.xcconfig */,
				7B3645EFB63597C820FD0759 /* Pods-App.release.xcconfig */,
			);
			name = Pods;
			sourceTree = \\"<group>\\";
		};
		D3097422C732829DA51DBC25 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				E045BD52917EA4B39612E12B /* Pods_App.framework */,
			);
			name = Frameworks;
			sourceTree = \\"<group>\\";
		};
		E258C91A1EE036970076097D = {
			isa = PBXGroup;
			children = (
				E258C9251EE036970076097D /* App */,
				E258C9241EE036970076097D /* Products */,
				5188048A03FF48C89161FB44 /* Pods */,
				D3097422C732829DA51DBC25 /* Frameworks */,
			);
			sourceTree = \\"<group>\\";
		};
		E258C9241EE036970076097D /* Products */ = {
			isa = PBXGroup;
			children = (
				E258C9231EE036970076097D /* App.app */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		E258C9251EE036970076097D /* App */ = {
			isa = PBXGroup;
			children = (
				E258C9261EE036970076097D /* AppDelegate.swift */,
				E258C9281EE036970076097D /* ViewController.swift */,
				E258C92A1EE036970076097D /* Main.storyboard */,
				E258C92D1EE036970076097D /* Assets.xcassets */,
				E258C92F1EE036970076097D /* LaunchScreen.storyboard */,
				E258C9321EE036970076097D /* Info.plist */,
			);
			path = \\"App\\";
			sourceTree = \\"<group>\\";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		E258C9221EE036970076097D /* App */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E258C9351EE036970076097D /* Build configuration list for PBXNativeTarget \\"App\\" */;
			buildPhases = (
				6ED659C468517EE7AE9D6746 /* [CP] Check Pods Manifest.lock */,
				E258C91F1EE036970076097D /* Sources */,
				E258C9201EE036970076097D /* Frameworks */,
				E258C9211EE036970076097D /* Resources */,
				483D9B8DF06BBE2B572623D2 /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = \\"App\\";
			productName = \\"App\\";
			productReference = E258C9231EE036970076097D /* App.app */;
			productType = \\"com.apple.product-type.application\\";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		E258C91B1EE036970076097D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftUpdateCheck = 0830;
				LastUpgradeCheck = 0830;
				ORGANIZATIONNAME = \\"Guy Daher\\";
				TargetAttributes = {
					E258C9221EE036970076097D = {
						CreatedOnToolsVersion = 8.3.2;
						DevelopmentTeam = K3DV6EU9CV;
						ProvisioningStyle = Automatic;
					};
				};
			};
			buildConfigurationList = E258C91E1EE036970076097D /* Build configuration list for PBXProject \\"App\\" */;
			compatibilityVersion = \\"Xcode 3.2\\";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = E258C91A1EE036970076097D;
			productRefGroup = E258C9241EE036970076097D /* Products */;
			projectDirPath = \\"\\";
			projectRoot = \\"\\";
			targets = (
				E258C9221EE036970076097D /* App */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		E258C9211EE036970076097D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E258C9311EE036970076097D /* LaunchScreen.storyboard in Resources */,
				E258C92E1EE036970076097D /* Assets.xcassets in Resources */,
				E258C92C1EE036970076097D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		483D9B8DF06BBE2B572623D2 /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				\\"\${SRCROOT}/Pods/Target Support Files/Pods-App/Pods-App-frameworks.sh\\",
				\\"\${BUILT_PRODUCTS_DIR}/InstantSearch/InstantSearch.framework\\",
				\\"\${BUILT_PRODUCTS_DIR}/InstantSearchClient/InstantSearchClient.framework\\",
				\\"\${BUILT_PRODUCTS_DIR}/InstantSearchCore/InstantSearchCore.framework\\",
			);
			name = \\"[CP] Embed Pods Frameworks\\";
			outputPaths = (
				\\"\${TARGET_BUILD_DIR}/\${FRAMEWORKS_FOLDER_PATH}/InstantSearch.framework\\",
				\\"\${TARGET_BUILD_DIR}/\${FRAMEWORKS_FOLDER_PATH}/InstantSearchClient.framework\\",
				\\"\${TARGET_BUILD_DIR}/\${FRAMEWORKS_FOLDER_PATH}/InstantSearchCore.framework\\",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = \\"\\\\\\"\${SRCROOT}/Pods/Target Support Files/Pods-App/Pods-App-frameworks.sh\\\\\\"\\\\n\\";
			showEnvVarsInLog = 0;
		};
		6ED659C468517EE7AE9D6746 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				\\"\${PODS_PODFILE_DIR_PATH}/Podfile.lock\\",
				\\"\${PODS_ROOT}/Manifest.lock\\",
			);
			name = \\"[CP] Check Pods Manifest.lock\\";
			outputPaths = (
				\\"$(DERIVED_FILE_DIR)/Pods-App-checkManifestLockResult.txt\\",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = \\"diff \\\\\\"\${PODS_PODFILE_DIR_PATH}/Podfile.lock\\\\\\" \\\\\\"\${PODS_ROOT}/Manifest.lock\\\\\\" > /dev/null\\\\nif [ $? != 0 ] ; then\\\\n    # print error to STDERR\\\\n    echo \\\\\\"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\\\\\\" >&2\\\\n    exit 1\\\\nfi\\\\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\\\\necho \\\\\\"SUCCESS\\\\\\" > \\\\\\"\${SCRIPT_OUTPUT_FILE_0}\\\\\\"\\\\n\\";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		E258C91F1EE036970076097D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E258C9291EE036970076097D /* ViewController.swift in Sources */,
				E258C9271EE036970076097D /* AppDelegate.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		E258C92A1EE036970076097D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				E258C92B1EE036970076097D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = \\"<group>\\";
		};
		E258C92F1EE036970076097D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				E258C9301EE036970076097D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = \\"<group>\\";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		E258C9331EE036970076097D /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				\\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\\" = \\"iPhone Developer\\";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					\\"DEBUG=1\\",
					\\"$(inherited)\\",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 10.3;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = \\"-Onone\\";
			};
			name = Debug;
		};
		E258C9341EE036970076097D /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				\\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\\" = \\"iPhone Developer\\";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = \\"dwarf-with-dsym\\";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 10.3;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SWIFT_OPTIMIZATION_LEVEL = \\"-Owholemodule\\";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		E258C9361EE036970076097D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = B7E0369A70FFFFD97E30AF6C /* Pods-App.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				DEVELOPMENT_TEAM = K3DV6EU9CV;
				INFOPLIST_FILE = \\"App/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				PRODUCT_BUNDLE_IDENTIFIER = \\"io.daher.Getting-Started-Programatically\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SWIFT_VERSION = 4.0;
			};
			name = Debug;
		};
		E258C9371EE036970076097D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7B3645EFB63597C820FD0759 /* Pods-App.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				DEVELOPMENT_TEAM = K3DV6EU9CV;
				INFOPLIST_FILE = \\"App/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				PRODUCT_BUNDLE_IDENTIFIER = \\"io.daher.Getting-Started-Programatically\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SWIFT_VERSION = 4.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		E258C91E1EE036970076097D /* Build configuration list for PBXProject \\"App\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E258C9331EE036970076097D /* Debug */,
				E258C9341EE036970076097D /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E258C9351EE036970076097D /* Build configuration list for PBXNativeTarget \\"App\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E258C9361EE036970076097D /* Debug */,
				E258C9371EE036970076097D /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = E258C91B1EE036970076097D /* Project object */;
}"
`;

exports[`Templates InstantSearch iOS File content: App.xcodeproj/project.xcworkspace/contents.xcworkspacedata 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<Workspace
   version = \\"1.0\\">
   <FileRef
      location = \\"self:App.xcodeproj\\">
   </FileRef>
</Workspace>"
`;

exports[`Templates InstantSearch iOS File content: App.xcworkspace/contents.xcworkspacedata 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<Workspace
   version = \\"1.0\\">
   <FileRef
      location = \\"group:App.xcodeproj\\">
   </FileRef>
   <FileRef
      location = \\"group:Pods/Pods.xcodeproj\\">
   </FileRef>
</Workspace>"
`;

exports[`Templates InstantSearch iOS File content: App.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>"
`;

exports[`Templates InstantSearch iOS File content: App/AppDelegate.swift 1`] = `
"import UIKit
import InstantSearch

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    private let ALGOLIA_APP_ID = \\"appId\\"
    private let ALGOLIA_API_KEY = \\"apiKey\\"
    private let ALGOLIA_INDEX_NAME = \\"indexName\\"

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        InstantSearch.shared.configure(appID: ALGOLIA_APP_ID, apiKey: ALGOLIA_API_KEY, index: ALGOLIA_INDEX_NAME)
        InstantSearch.shared.params.attributesToRetrieve = [\\"attribute1\\", \\"attribute2\\"]
        InstantSearch.shared.params.attributesToHighlight = [\\"attribute1\\", \\"attribute2\\"]

        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }


}"
`;

exports[`Templates InstantSearch iOS File content: App/Assets.xcassets/AppIcon.appiconset/Contents.json 1`] = `
"{
  \\"images\\": [
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"20x20\\",
      \\"scale\\": \\"2x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"20x20\\",
      \\"scale\\": \\"3x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"29x29\\",
      \\"scale\\": \\"2x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"29x29\\",
      \\"scale\\": \\"3x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"40x40\\",
      \\"scale\\": \\"2x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"40x40\\",
      \\"scale\\": \\"3x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"60x60\\",
      \\"scale\\": \\"2x\\"
    },
    {
      \\"idiom\\": \\"iphone\\",
      \\"size\\": \\"60x60\\",
      \\"scale\\": \\"3x\\"
    }
  ],
  \\"info\\": {
    \\"version\\": 1,
    \\"author\\": \\"xcode\\"
  }
}"
`;

exports[`Templates InstantSearch iOS File content: App/Base.lproj/LaunchScreen.storyboard 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?>
<document type=\\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\\" version=\\"3.0\\" toolsVersion=\\"11134\\" systemVersion=\\"15F34\\" targetRuntime=\\"iOS.CocoaTouch\\" propertyAccessControl=\\"none\\" useAutolayout=\\"YES\\" launchScreen=\\"YES\\" useTraitCollections=\\"YES\\" colorMatched=\\"YES\\" initialViewController=\\"01J-lp-oVM\\">
    <dependencies>
        <plugIn identifier=\\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\\" version=\\"11106\\"/>
        <capability name=\\"documents saved in the Xcode 8 format\\" minToolsVersion=\\"8.0\\"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID=\\"EHf-IW-A2E\\">
            <objects>
                <viewController id=\\"01J-lp-oVM\\" sceneMemberID=\\"viewController\\">
                    <layoutGuides>
                        <viewControllerLayoutGuide type=\\"top\\" id=\\"Llm-lL-Icb\\"/>
                        <viewControllerLayoutGuide type=\\"bottom\\" id=\\"xb3-aO-Qok\\"/>
                    </layoutGuides>
                    <view key=\\"view\\" contentMode=\\"scaleToFill\\" id=\\"Ze5-6b-2t3\\">
                        <rect key=\\"frame\\" x=\\"0.0\\" y=\\"0.0\\" width=\\"375\\" height=\\"667\\"/>
                        <autoresizingMask key=\\"autoresizingMask\\" widthSizable=\\"YES\\" heightSizable=\\"YES\\"/>
                        <color key=\\"backgroundColor\\" red=\\"1\\" green=\\"1\\" blue=\\"1\\" alpha=\\"1\\" colorSpace=\\"custom\\" customColorSpace=\\"sRGB\\"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier=\\"IBFirstResponder\\" id=\\"iYj-Kq-Ea1\\" userLabel=\\"First Responder\\" sceneMemberID=\\"firstResponder\\"/>
            </objects>
            <point key=\\"canvasLocation\\" x=\\"53\\" y=\\"375\\"/>
        </scene>
    </scenes>
</document>"
`;

exports[`Templates InstantSearch iOS File content: App/Base.lproj/Main.storyboard 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<document type=\\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\\" version=\\"3.0\\" toolsVersion=\\"12120\\" systemVersion=\\"16F71b\\" targetRuntime=\\"iOS.CocoaTouch\\" propertyAccessControl=\\"none\\" useAutolayout=\\"YES\\" useTraitCollections=\\"YES\\" colorMatched=\\"YES\\" initialViewController=\\"BYZ-38-t0r\\">
    <device id=\\"retina4_7\\" orientation=\\"portrait\\">
        <adaptation id=\\"fullscreen\\"/>
    </device>
    <dependencies>
        <deployment identifier=\\"iOS\\"/>
        <plugIn identifier=\\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\\" version=\\"12088\\"/>
        <capability name=\\"documents saved in the Xcode 8 format\\" minToolsVersion=\\"8.0\\"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID=\\"tne-QT-ifu\\">
            <objects>
                <viewController id=\\"BYZ-38-t0r\\" customClass=\\"ViewController\\" customModule=\\"Getting_Started_Programatically\\" customModuleProvider=\\"target\\" sceneMemberID=\\"viewController\\">
                    <layoutGuides>
                        <viewControllerLayoutGuide type=\\"top\\" id=\\"y3c-jy-aDJ\\"/>
                        <viewControllerLayoutGuide type=\\"bottom\\" id=\\"wfy-db-euE\\"/>
                    </layoutGuides>
                    <view key=\\"view\\" contentMode=\\"scaleToFill\\" id=\\"8bC-Xf-vdC\\">
                        <rect key=\\"frame\\" x=\\"0.0\\" y=\\"0.0\\" width=\\"375\\" height=\\"667\\"/>
                        <autoresizingMask key=\\"autoresizingMask\\" widthSizable=\\"YES\\" heightSizable=\\"YES\\"/>
                        <color key=\\"backgroundColor\\" red=\\"1\\" green=\\"1\\" blue=\\"1\\" alpha=\\"1\\" colorSpace=\\"custom\\" customColorSpace=\\"sRGB\\"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier=\\"IBFirstResponder\\" id=\\"dkx-z0-nzr\\" sceneMemberID=\\"firstResponder\\"/>
            </objects>
            <point key=\\"canvasLocation\\" x=\\"136.80000000000001\\" y=\\"138.98050974512745\\"/>
        </scene>
    </scenes>
</document>"
`;

exports[`Templates InstantSearch iOS File content: App/Info.plist 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>armv7</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
</dict>
</plist>"
`;

exports[`Templates InstantSearch iOS File content: App/ViewController.swift 1`] = `
"import UIKit
import InstantSearch
import InstantSearchCore

class ViewController: HitsTableViewController {

    // Create your widgets
    let searchBar = SearchBarWidget(frame: .zero)
    let stats = StatsLabelWidget(frame: .zero)
    let tableView = HitsTableWidget(frame: .zero)

    override func viewDidLoad() {
        super.viewDidLoad()

        initUI()

        // and assign tableView to InstantSearch
        hitsTableView = tableView

        // Add all widgets to InstantSearch
        InstantSearch.shared.registerAllWidgets(in: self.view)
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath, containing hit: [String : Any]) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: \\"hitCell\\", for: indexPath)

        cell.textLabel?.highlightedTextColor = .blue
        cell.textLabel?.highlightedBackgroundColor = .yellow
        cell.textLabel?.highlightedText = SearchResults.highlightResult(hit: hit, path: \\"attribute1\\")?.value

        return cell
    }

    func initUI() {
        // Add the declared views to the main view
        self.view.addSubview(searchBar)
        self.view.addSubview(stats)
        self.view.addSubview(tableView)

        // Add autolayout constraints
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        stats.translatesAutoresizingMaskIntoConstraints = false
        tableView.translatesAutoresizingMaskIntoConstraints = false

        let views = [\\"searchBar\\": searchBar, \\"stats\\": stats, \\"tableView\\": tableView]
        var constraints = [NSLayoutConstraint]()
        constraints += NSLayoutConstraint.constraints(withVisualFormat: \\"V:|-30-[searchBar]-10-[stats]-10-[tableView]-|\\", options: [], metrics: nil, views:views)
        constraints += NSLayoutConstraint.constraints(withVisualFormat: \\"H:|-25-[searchBar]-25-|\\", options: [], metrics: nil, views:views)
        constraints += NSLayoutConstraint.constraints(withVisualFormat: \\"H:|-25-[stats]-25-|\\", options: [], metrics: nil, views:views)
        constraints += NSLayoutConstraint.constraints(withVisualFormat: \\"H:|-[tableView]-|\\", options: [], metrics: nil, views:views)
        NSLayoutConstraint.activate(constraints)

        // Register tableView identifier
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \\"hitCell\\")

        // Style the stats label
        stats.textAlignment = .center
        stats.font = UIFont.boldSystemFont(ofSize:18.0)
    }

}"
`;

exports[`Templates InstantSearch iOS File content: Podfile 1`] = `
"# Uncomment the next line to define a global platform for your project
# platform :ios, '9.0'

target 'App' do
  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks
  use_frameworks!

  # Pods for App
  pod 'InstantSearch'

end"
`;

exports[`Templates InstantSearch iOS Folder structure: contains the right files 1`] = `
Array [
  ".gitignore",
  "App.xcodeproj/project.pbxproj",
  "App.xcodeproj/project.xcworkspace/contents.xcworkspacedata",
  "App.xcworkspace/contents.xcworkspacedata",
  "App.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist",
  "App/AppDelegate.swift",
  "App/Assets.xcassets/AppIcon.appiconset/Contents.json",
  "App/Base.lproj/LaunchScreen.storyboard",
  "App/Base.lproj/Main.storyboard",
  "App/Info.plist",
  "App/ViewController.swift",
  "Podfile",
]
`;

exports[`Templates InstantSearch.js File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates InstantSearch.js File content: .eslintignore 1`] = `
"/node_modules
/dist
/.cache"
`;

exports[`Templates InstantSearch.js File content: .eslintrc.js 1`] = `
"module.exports = {
  extends: 'algolia',
};"
`;

exports[`Templates InstantSearch.js File content: .gitignore 1`] = `
"# See https://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules

# testing
/coverage

# production
/dist
/.cache

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*"
`;

exports[`Templates InstantSearch.js File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates InstantSearch.js File content: README.md 1`] = `
"# instantsearch.js-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates InstantSearch.js File content: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">

<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">
  <meta name=\\"theme-color\\" content=\\"#000000\\">

  <link rel=\\"shortcut icon\\" href=\\"./favicon.png\\">

  <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/satellite-min.css\\">
  <link rel=\\"stylesheet\\" href=\\"./src/index.css\\">
  <link rel=\\"stylesheet\\" href=\\"./src/app.css\\">

  <title>instantsearch.js-app</title>
</head>

<body>
  <header class=\\"header\\">
    <h1 class=\\"header-title\\">
      <a href=\\"/\\">instantsearch.js-app</a>
    </h1>
    <p class=\\"header-subtitle\\">
      using
      <a href=\\"https://github.com/algolia/instantsearch/tree/master/packages/instantsearch.js\\">
        InstantSearch.js
      </a>
    </p>
  </header>

  <div class=\\"container\\">
    <div class=\\"search-panel\\">
      <div class=\\"search-panel__filters\\">
        <div id=\\"dynamic-widgets\\"></div>
      </div>

      <div class=\\"search-panel__results\\">
        <div id=\\"searchbox\\"></div>
        <div id=\\"hits\\"></div>
        <div id=\\"pagination\\"></div>
      </div>
    </div>
  </div>

  <script src=\\"https://cdn.jsdelivr.net/npm/algoliasearch@4.10.5/dist/algoliasearch-lite.umd.js\\"></script>
  <script src=\\"https://cdn.jsdelivr.net/npm/instantsearch.js@3.0.0\\"></script>
  <script src=\\"./src/app.js\\"></script>
</body>

</html>"
`;

exports[`Templates InstantSearch.js File content: package.json 1`] = `
"{
  \\"name\\": \\"instantsearch.js-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"start\\": \\"parcel index.html --port 3000\\",
    \\"build\\": \\"parcel build index.html\\",
    \\"lint\\": \\"eslint . && prettier --check .\\",
    \\"lint:fix\\": \\"eslint . --fix && prettier --write .\\"
  },
  \\"partialDependencies\\": {
    \\"instantsearch.js\\": \\"3.0.0\\"
  }
}"
`;

exports[`Templates InstantSearch.js File content: src/app.css 1`] = `
".header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(284deg, #fedd4e, #fcb43a);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.search-panel {
  display: flex;
}

.search-panel__filters {
  flex: 1;
}

.search-panel__results {
  flex: 3;
}

.ais-Highlight-highlighted {
  color: inherit;
  font-size: inherit;
}

#searchbox {
  margin-bottom: 2rem;
}

#pagination {
  margin: 2rem auto;
  text-align: center;
}"
`;

exports[`Templates InstantSearch.js File content: src/app.js 1`] = `
"const { algoliasearch, instantsearch } = window;

const searchClient = algoliasearch('appId', 'apiKey');

const search = instantsearch({
  indexName: 'indexName',
  searchClient,
  future: { preserveSharedStateOnUnmount: true },
  insights: true,
});

search.addWidgets([
  instantsearch.widgets.searchBox({
    container: '#searchbox',
    placeholder: 'Search placeholder',
  }),
  instantsearch.widgets.hits({
    container: '#hits',
    templates: {
      item: (hit, { html, components }) => html\`
        <article>
          <h1>\${components.Highlight({ hit, attribute: 'attribute1' })}</h1>
          <p>\${components.Highlight({ hit, attribute: 'attribute2' })}</p>
        </article>
      \`,
    },
  }),
  instantsearch.widgets.configure({
    hitsPerPage: 8,
  }),
  instantsearch.widgets.dynamicWidgets({
    container: '#dynamic-widgets',
    fallbackWidget({ container, attribute }) {
      return instantsearch.widgets.panel({
        templates: { header: () => attribute },
      })(instantsearch.widgets.refinementList)({
        container,
        attribute,
      });
    },
    widgets: [
      (container) =>
        instantsearch.widgets.panel({
          templates: { header: () => 'facet1' },
        })(instantsearch.widgets.refinementList)({
          container,
          attribute: 'facet1',
        }),
      (container) =>
        instantsearch.widgets.panel({
          templates: { header: () => 'facet2' },
        })(instantsearch.widgets.refinementList)({
          container,
          attribute: 'facet2',
        }),
    ],
  }),
  instantsearch.widgets.pagination({
    container: '#pagination',
  }),
]);

search.start();"
`;

exports[`Templates InstantSearch.js File content: src/global.d.ts 1`] = `
"import algoliasearch from 'algoliasearch/lite';
import instantsearch from 'instantsearch.js/dist/instantsearch.production.min';

declare global {
  interface Window {
    algoliasearch: typeof algoliasearch;
    instantsearch: typeof instantsearch;
  }
}"
`;

exports[`Templates InstantSearch.js File content: src/index.css 1`] = `
"body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}"
`;

exports[`Templates InstantSearch.js File content: tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"module\\": \\"commonjs\\",
    \\"esModuleInterop\\": true,
    \\"sourceMap\\": true,
    \\"allowJs\\": true,
    \\"lib\\": [
      \\"es6\\",
      \\"dom\\"
    ],
    \\"rootDir\\": \\"src\\",
    \\"moduleResolution\\": \\"node\\"
  },
  \\"include\\": [
    \\"src\\",
    \\"src/global.d.ts\\"
  ]
}"
`;

exports[`Templates InstantSearch.js Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".eslintignore",
  ".eslintrc.js",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "favicon.png",
  "index.html",
  "package.json",
  "src/app.css",
  "src/app.js",
  "src/global.d.ts",
  "src/index.css",
  "tsconfig.json",
]
`;

exports[`Templates InstantSearch.js widget File content: .eslintignore 1`] = `
"# Vendors
node_modules

# Artifacts
dist"
`;

exports[`Templates InstantSearch.js widget File content: .eslintrc.cjs 1`] = `
"module.exports = {
  extends: ['algolia', 'algolia/jest', 'algolia/typescript'],
  rules: {
    '@typescript-eslint/explicit-function-return-type': 'off',
  },
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.ts'],
      },
    },
  },
  overrides: [
    {
      files: ['*.cjs'],
      rules: {
        'import/no-commonjs': 'off',
      },
    },
  ],
};"
`;

exports[`Templates InstantSearch.js widget File content: .gitignore 1`] = `
"node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
dist/"
`;

exports[`Templates InstantSearch.js widget File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates InstantSearch.js widget File content: CONTRIBUTING.md 1`] = `
"# Contribution Guide

## Test

The tests are written in \`/src/__tests__\` and use Jest.

\`\`\`bash
npm test
# or
yarn test
\`\`\`

An example can be found in the \`example\` directory.

## Build

\`\`\`bash
npm run build
# or
yarn build
\`\`\`

## Release

\`\`\`bash
npm run release
# or
yarn release
\`\`\`

### First Release

\`\`\`bash
npm run release -- --first-release
# or
yarn release --first-release
\`\`\`

This will tag a release without bumping the version.

When you are ready, push the git tag and run \`npm publish\`.

If you want to publish it as a public scoped package, run \`npm publish --access public\` the first time.

[To know more about \`standard-version\`, read this â†’](https://github.com/conventional-changelog/standard-version#cli-usage)"
`;

exports[`Templates InstantSearch.js widget File content: LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2023-present algolia.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE."
`;

exports[`Templates InstantSearch.js widget File content: README.md 1`] = `
"# date-picker



---

[![MIT](https://img.shields.io/npm/l/@algolia/instantsearch-widget-date-picker)](./LICENSE) [![NPM version](http://img.shields.io/npm/v/@algolia/instantsearch-widget-date-picker.svg)](https://npmjs.org/package/@algolia/instantsearch-widget-date-picker)

## Install

\`\`\`bash
npm install @algolia/instantsearch-widget-date-picker
# or
yarn add @algolia/instantsearch-widget-date-picker
\`\`\`

## Widget

### Usage

\`\`\`js
import instantsearch from 'instantsearch.js';
import algoliasearch from 'algoliasearch/lite';
import { datePicker } from '@algolia/instantsearch-widget-date-picker';

const searchClient = algoliasearch('appId', 'apiKey');

const search = instantsearch({
  indexName: 'indexName',
  searchClient,
});

search.addWidgets([
  datePicker({
    // widget parameters
  }),
]);

search.start();
\`\`\`

### Options

| Option | Type | Required | Default | Description |
| :-- | :-- | :-- | :-- | --- |
| [\`container\`](#container) | \`string\` or \`HTMLElement\` | true | - | The element to insert the widget into. |
| [\`option1\`](#option1) | \`...\` | true | - | REPLACE WITH THE DESCRIPTION FOR THIS OPTION |

#### container

> \`string | Element\` | **required**

The element to insert the widget into.

This can be either a valid CSS Selector:

\`\`\`js
datePicker({
  container: '#date-picker',
  // ...
});
\`\`\`

or an \`HTMLElement\`:

\`\`\`js
datePicker({
  container: document.querySelector('#date-picker'),
  // ...
});
\`\`\`

#### option1

> \`...\` | **required**

REPLACE WITH THE DESCRIPTION FOR THIS OPTION

\`\`\`js
datePicker({
  option1: 'value',
  // ...
});
\`\`\`

## Connector

### Usage

\`\`\`js
import { connectDatePicker } from '@algolia/instantsearch-widget-date-picker';

// 1. Create a render function
const renderDatePicker = (renderOptions, isFirstRender) => {
  // Rendering logic
};

// 2. Create the custom widget
const customDatePicker = connectDatePicker(
  renderDatePicker
);

// 3. Instantiate
search.addWidgets([
  customDatePicker({
    // instance params
  }),
]);
\`\`\`

### Options

#### option1

> \`...\`

REPLACE WITH THE DESCRIPTION FOR THIS RENDERING ITEM

\`\`\`js
const renderDatePicker = (renderOptions, isFirstRender) => {
  // show how to use this render option
};

const customDatePicker = connectDatePicker(
  renderDatePicker,
);

search.addWidgets([
  customDatePicker({
    // ...
  }),
]);
\`\`\`

#### widgetParams

> \`object\`

All original widget options forwarded to the render function.

\`\`\`js
const renderDatePicker = (renderOptions, isFirstRender) => {
  const { widgetParams } = renderOptions;
  widgetParams.container.innerHTML = '...';
};

const customDatePicker = connectDatePicker(
  renderDatePicker,
);

search.addWidgets([
  customDatePicker({
    container: document.querySelector('#date-picker'),
    // ...
  }),
]);
\`\`\`

## Contributing

To start contributing to code, you need to:

1. [Fork the project](https://docs.github.com/en/get-started/quickstart/fork-a-repo)
2. [Clone the repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github/cloning-a-repository)
3. Install the dependencies: \`yarn\`
4. Run the development mode: \`yarn start\`

Please read [our contribution process](./CONTRIBUTING.md) to learn more.

---

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._"
`;

exports[`Templates InstantSearch.js widget File content: babel.config.cjs 1`] = `
"/* eslint-disable import/no-commonjs */
module.exports = (api) => {
  const isCJS = process.env.BABEL_ENV === 'cjs';
  const isESM = process.env.BABEL_ENV === 'esm';
  const isTest = process.env.NODE_ENV === 'test';
  const removeEmpty = (x) => x.filter(Boolean);

  /*
   * Cache babel result according to the current environment
   * https://babeljs.io/docs/en/config-files#apicache
   */
  api.cache(() => \`\${process.env.NODE_ENV}-\${process.env.BABEL_ENV}\`);

  return {
    presets: [
      /*
       * Apply transforms for TypeScript
       * https://babeljs.io/docs/en/babel-preset-typescript
       */
      '@babel/preset-typescript',
      /*
       * Apply transforms depending of the target environement
       * https://babeljs.io/docs/en/babel-preset-env
       */
      [
        '@babel/preset-env',
        {
          targets: Object.assign(
            {},
            /*
             * For tests only target the current Node.js version
             * Otherwise it uses the values from the \`browserslist\` entry in \`package.json\`
             * https://babeljs.io/docs/en/babel-preset-env#targetsnode
             */
            isTest && {
              node: 'current',
            }
          ),
          /*
           * Transform the modules type for the CommonJS build
           * Otherwise keep the ECMAScript modules syntax
           * https://babeljs.io/docs/en/babel-preset-env#modules
           */
          modules: isCJS ? 'commonjs' : false,
        },
      ],
    ],
    plugins: removeEmpty(
      /*
       * Add extensions to import and export declarations
       * ECMAScript modules syntax require extensions when using the \`import\` keyword to resolve relative or absolute specifiers
       * https://github.com/karlprieb/babel-plugin-add-import-extension
       * https://nodejs.org/dist/latest-v14.x/docs/api/esm.html#esm_mandatory_file_extensions
       */
      [isESM && 'add-import-extension']
    ),
  };
};"
`;

exports[`Templates InstantSearch.js widget File content: config/api-extractor.json 1`] = `
"/**
 * Config file for API Extractor.  For more info, please visit: https://api-extractor.com
 */
{
  \\"$schema\\": \\"https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json\\",

  /**
   * Optionally specifies another JSON config file that this file extends from.  This provides a way for
   * standard settings to be shared across multiple projects.
   *
   * If the path starts with \\"./\\" or \\"../\\", the path is resolved relative to the folder of the file that contains
   * the \\"extends\\" field.  Otherwise, the first path segment is interpreted as an NPM package name, and will be
   * resolved using NodeJS require().
   *
   * SUPPORTED TOKENS: none
   * DEFAULT VALUE: \\"\\"
   */
  // \\"extends\\": \\"./shared/api-extractor-base.json\\"

  /**
   * Determines the \\"<projectFolder>\\" token that can be used with other config file settings.  The project folder
   * typically contains the tsconfig.json and package.json config files, but the path is user-defined.
   *
   * The path is resolved relative to the folder of the config file that contains the setting.
   *
   * The default value for \\"projectFolder\\" is the token \\"<lookup>\\", which means the folder is determined by traversing
   * parent folders, starting from the folder containing api-extractor.json, and stopping at the first folder
   * that contains a tsconfig.json file.  If a tsconfig.json file cannot be found in this way, then an error
   * will be reported.
   *
   * SUPPORTED TOKENS: <lookup>
   * DEFAULT VALUE: \\"<lookup>\\"
   */
  \\"projectFolder\\": \\"..\\",

  /**
   * (REQUIRED) Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor
   * analyzes the symbols exported by this module.
   *
   * The file extension must be \\".d.ts\\" and not \\".ts\\".
   *
   * The path is resolved relative to the folder of the config file that contains the setting; to change this,
   * prepend a folder token such as \\"<projectFolder>\\".
   *
   * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
   */
  \\"mainEntryPointFilePath\\": \\"<projectFolder>/dist/_types/index.d.ts\\",

  /**
   * A list of NPM package names whose exports should be treated as part of this package.
   *
   * For example, suppose that Webpack is used to generate a distributed bundle for the project \\"library1\\",
   * and another NPM package \\"library2\\" is embedded in this bundle.  Some types from library2 may become part
   * of the exported API for library1, but by default API Extractor would generate a .d.ts rollup that explicitly
   * imports library2.  To avoid this, we can specify:
   *
   *   \\"bundledPackages\\": [ \\"library2\\" ],
   *
   * This would direct API Extractor to embed those types directly in the .d.ts rollup, as if they had been
   * local files for library1.
   */
  \\"bundledPackages\\": [],

  /**
   * Determines how the TypeScript compiler engine will be invoked by API Extractor.
   */
  \\"compiler\\": {
    /**
     * Specifies the path to the tsconfig.json file to be used by API Extractor when analyzing the project.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * Note: This setting will be ignored if \\"overrideTsconfig\\" is used.
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<projectFolder>/tsconfig.json\\"
     */
    \\"tsconfigFilePath\\": \\"<projectFolder>/tsconfig.declaration.json\\"
    /**
     * Provides a compiler configuration that will be used instead of reading the tsconfig.json file from disk.
     * The object must conform to the TypeScript tsconfig schema:
     *
     * http://json.schemastore.org/tsconfig
     *
     * If omitted, then the tsconfig.json file will be read from the \\"projectFolder\\".
     *
     * DEFAULT VALUE: no overrideTsconfig section
     */
    // \\"overrideTsconfig\\": {
    //   . . .
    // }
    /**
     * This option causes the compiler to be invoked with the --skipLibCheck option. This option is not recommended
     * and may cause API Extractor to produce incomplete or incorrect declarations, but it may be required when
     * dependencies contain declarations that are incompatible with the TypeScript engine that API Extractor uses
     * for its analysis.  Where possible, the underlying issue should be fixed rather than relying on skipLibCheck.
     *
     * DEFAULT VALUE: false
     */
    // \\"skipLibCheck\\": true,
  },

  /**
   * Configures how the API report file (*.api.md) will be generated.
   */
  \\"apiReport\\": {
    /**
     * (REQUIRED) Whether to generate an API report.
     */
    \\"enabled\\": false

    /**
     * The filename for the API report files.  It will be combined with \\"reportFolder\\" or \\"reportTempFolder\\" to produce
     * a full file path.
     *
     * The file extension should be \\".api.md\\", and the string should not contain a path separator such as \\"\\\\\\" or \\"/\\".
     *
     * SUPPORTED TOKENS: <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<unscopedPackageName>.api.md\\"
     */
    // \\"reportFileName\\": \\"<unscopedPackageName>.api.md\\",

    /**
     * Specifies the folder where the API report file is written.  The file name portion is determined by
     * the \\"reportFileName\\" setting.
     *
     * The API report file is normally tracked by Git.  Changes to it can be used to trigger a branch policy,
     * e.g. for an API review.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<projectFolder>/etc/\\"
     */
    // \\"reportFolder\\": \\"<projectFolder>/etc/\\",

    /**
     * Specifies the folder where the temporary report file is written.  The file name portion is determined by
     * the \\"reportFileName\\" setting.
     *
     * After the temporary file is written to disk, it is compared with the file in the \\"reportFolder\\".
     * If they are different, a production build will fail.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<projectFolder>/temp/\\"
     */
    // \\"reportTempFolder\\": \\"<projectFolder>/temp/\\"
  },

  /**
   * Configures how the doc model file (*.api.json) will be generated.
   */
  \\"docModel\\": {
    /**
     * (REQUIRED) Whether to generate a doc model file.
     */
    \\"enabled\\": false

    /**
     * The output path for the doc model file.  The file extension should be \\".api.json\\".
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<projectFolder>/temp/<unscopedPackageName>.api.json\\"
     */
    // \\"apiJsonFilePath\\": \\"<projectFolder>/temp/<unscopedPackageName>.api.json\\"
  },

  /**
   * Configures how the .d.ts rollup file will be generated.
   */
  \\"dtsRollup\\": {
    /**
     * (REQUIRED) Whether to generate the .d.ts rollup file.
     */
    \\"enabled\\": true,

    /**
     * Specifies the output path for a .d.ts rollup file to be generated without any trimming.
     * This file will include all declarations that are exported by the main entry point.
     *
     * If the path is an empty string, then this file will not be written.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<projectFolder>/dist/<unscopedPackageName>.d.ts\\"
     */
    \\"untrimmedFilePath\\": \\"<projectFolder>/dist/index.es.d.ts\\"

    /**
     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \\"beta\\" release.
     * This file will include only declarations that are marked as \\"@public\\" or \\"@beta\\".
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"\\"
     */
    // \\"betaTrimmedFilePath\\": \\"<projectFolder>/dist/<unscopedPackageName>-beta.d.ts\\",

    /**
     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \\"public\\" release.
     * This file will include only declarations that are marked as \\"@public\\".
     *
     * If the path is an empty string, then this file will not be written.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"\\"
     */
    // \\"publicTrimmedFilePath\\": \\"<projectFolder>/dist/<unscopedPackageName>-public.d.ts\\",

    /**
     * When a declaration is trimmed, by default it will be replaced by a code comment such as
     * \\"Excluded from this release type: exampleMember\\".  Set \\"omitTrimmingComments\\" to true to remove the
     * declaration completely.
     *
     * DEFAULT VALUE: false
     */
    // \\"omitTrimmingComments\\": true
  },

  /**
   * Configures how the tsdoc-metadata.json file will be generated.
   */
  \\"tsdocMetadata\\": {
    /**
     * Whether to generate the tsdoc-metadata.json file.
     *
     * DEFAULT VALUE: true
     */
    \\"enabled\\": false
    /**
     * Specifies where the TSDoc metadata file should be written.
     *
     * The path is resolved relative to the folder of the config file that contains the setting; to change this,
     * prepend a folder token such as \\"<projectFolder>\\".
     *
     * The default value is \\"<lookup>\\", which causes the path to be automatically inferred from the \\"tsdocMetadata\\",
     * \\"typings\\" or \\"main\\" fields of the project's package.json.  If none of these fields are set, the lookup
     * falls back to \\"tsdoc-metadata.json\\" in the package folder.
     *
     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>
     * DEFAULT VALUE: \\"<lookup>\\"
     */
    // \\"tsdocMetadataFilePath\\": \\"<projectFolder>/dist/tsdoc-metadata.json\\"
  },

  /**
   * Specifies what type of newlines API Extractor should use when writing output files.  By default, the output files
   * will be written with Windows-style newlines.  To use POSIX-style newlines, specify \\"lf\\" instead.
   * To use the OS's default newline kind, specify \\"os\\".
   *
   * DEFAULT VALUE: \\"crlf\\"
   */
  // \\"newlineKind\\": \\"crlf\\",

  /**
   * Configures how API Extractor reports error and warning messages produced during analysis.
   *
   * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.
   */
  \\"messages\\": {
    /**
     * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing
     * the input .d.ts files.
     *
     * TypeScript message identifiers start with \\"TS\\" followed by an integer.  For example: \\"TS2551\\"
     *
     * DEFAULT VALUE:  A single \\"default\\" entry with logLevel=warning.
     */
    \\"compilerMessageReporting\\": {
      /**
       * Configures the default routing for messages that don't match an explicit rule in this table.
       */
      \\"default\\": {
        /**
         * Specifies whether the message should be written to the the tool's output log.  Note that
         * the \\"addToApiReportFile\\" property may supersede this option.
         *
         * Possible values: \\"error\\", \\"warning\\", \\"none\\"
         *
         * Errors cause the build to fail and return a nonzero exit code.  Warnings cause a production build fail
         * and return a nonzero exit code.  For a non-production build (e.g. when \\"api-extractor run\\" includes
         * the \\"--local\\" option), the warning is displayed but the build will not fail.
         *
         * DEFAULT VALUE: \\"warning\\"
         */
        \\"logLevel\\": \\"warning\\"

        /**
         * When addToApiReportFile is true:  If API Extractor is configured to write an API report file (.api.md),
         * then the message will be written inside that file; otherwise, the message is instead logged according to
         * the \\"logLevel\\" option.
         *
         * DEFAULT VALUE: false
         */
        // \\"addToApiReportFile\\": false
      }

      // \\"TS2551\\": {
      //   \\"logLevel\\": \\"warning\\",
      //   \\"addToApiReportFile\\": true
      // },
      //
      // . . .
    },

    /**
     * Configures handling of messages reported by API Extractor during its analysis.
     *
     * API Extractor message identifiers start with \\"ae-\\".  For example: \\"ae-extra-release-tag\\"
     *
     * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings
     */
    \\"extractorMessageReporting\\": {
      \\"default\\": {
        \\"logLevel\\": \\"warning\\"
        // \\"addToApiReportFile\\": false
      },

      \\"ae-missing-release-tag\\": {
        \\"logLevel\\": \\"none\\"
      }

      // \\"ae-extra-release-tag\\": {
      //   \\"logLevel\\": \\"warning\\",
      //   \\"addToApiReportFile\\": true
      // },
      //
      // . . .
    },

    /**
     * Configures handling of messages reported by the TSDoc parser when analyzing code comments.
     *
     * TSDoc message identifiers start with \\"tsdoc-\\".  For example: \\"tsdoc-link-tag-unescaped-text\\"
     *
     * DEFAULT VALUE:  A single \\"default\\" entry with logLevel=warning.
     */
    \\"tsdocMessageReporting\\": {
      \\"default\\": {
        \\"logLevel\\": \\"warning\\"
        // \\"addToApiReportFile\\": false
      }

      // \\"tsdoc-link-tag-unescaped-text\\": {
      //   \\"logLevel\\": \\"warning\\",
      //   \\"addToApiReportFile\\": true
      // },
      //
      // . . .
    }
  }
}"
`;

exports[`Templates InstantSearch.js widget File content: example/index.css 1`] = `
"body {
  font-family: sans-serif;
}

[class^='ais-'] {
  font-size: 1em;
}"
`;

exports[`Templates InstantSearch.js widget File content: example/index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"UTF-8\\" />
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />
    <link
      rel=\\"stylesheet\\"
      href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/algolia-min.css\\"
    />
    <link rel=\\"stylesheet\\" href=\\"style.css\\" />
    <title>date-picker example</title>
  </head>
  <body>
    <div id=\\"search-box\\"></div>
    <div id=\\"example\\"></div>
    <div id=\\"hits\\"></div>
    <script src=\\"index.ts\\"></script>
  </body>
</html>"
`;

exports[`Templates InstantSearch.js widget File content: example/index.ts 1`] = `
"import algoliasearch from 'algoliasearch/lite';
import instantsearch from 'instantsearch.js/es';
import { configure, hits, searchBox } from 'instantsearch.js/es/widgets';

import { datePicker } from '../src';

const search = instantsearch({
  indexName: 'instant_search',
  searchClient: algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76'),
});

search.addWidgets([
  datePicker({ container: '#example' }),

  searchBox({ container: '#search-box' }),
  configure({
    attributesToSnippet: ['description:10'],
    snippetEllipsisText: '[â€¦]',
  }),
  hits({
    container: '#hits',
    templates: {
      item: \`
      <p>
        
      </p>
      <small>
        
      </small>
    \`,
    },
  }),
]);

search.start();"
`;

exports[`Templates InstantSearch.js widget File content: package.json 1`] = `
"{
  \\"name\\": \\"@algolia/instantsearch-widget-date-picker\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"\\",
  \\"keywords\\": [
    \\"instantsearch-widget\\",
    \\"instantsearch\\",
    \\"instantsearch-widget-date-picker\\",
    \\"widget\\",
    \\"connector\\",
    \\"algolia\\"
  ],
  \\"license\\": \\"MIT\\",
  \\"main\\": \\"./dist/index.cjs.js\\",
  \\"module\\": \\"./dist/index.es.js\\",
  \\"exports\\": {
    \\"import\\": \\"./dist/index.es.js\\",
    \\"require\\": \\"./dist/index.cjs.js\\"
  },
  \\"jsdelivr\\": \\"./dist/index.umd.js\\",
  \\"unpkg\\": \\"./dist/index.umd.js\\",
  \\"types\\": \\"./dist/index.es.d.ts\\",
  \\"type\\": \\"module\\",
  \\"scripts\\": {
    \\"start\\": \\"vite serve example\\",
    \\"build\\": \\"vite build && rm -rf dist/_types\\",
    \\"test\\": \\"npm run lint && npm run test:types && npm run test:unit\\",
    \\"test:unit\\": \\"jest\\",
    \\"test:types\\": \\"tsc\\",
    \\"lint\\": \\"eslint --ext .js,.ts .\\",
    \\"release\\": \\"standard-version\\"
  },
  \\"files\\": [
    \\"dist\\"
  ],
  \\"peerDependencies\\": {
    \\"instantsearch.js\\": \\"^4.27.1\\"
  },
  \\"browserslist\\": [
    \\"last 2 chrome versions\\",
    \\"last 2 firefox versions\\",
    \\"last 2 edge versions\\",
    \\"last 2 safari versions\\",
    \\"IE 11\\"
  ],
  \\"partialDependencies\\": {}
}"
`;

exports[`Templates InstantSearch.js widget File content: src/connector.ts 1`] = `
"import type { DatePickerConnector } from './types';

/*
 * Creates the connector
 * The connector takes the renderer and the unmounter as parameters and returns a widget factory.
 * This factory is a plain function that takes the connectorParams as parameters and returns a widget.
 * This widget is defined as a plain JS object with methods that will be called during InstantSearch.js lifecycle.
 * Theses methods are of 2 types:
 * - Lifecycle methods (\`init\`, \`render\`, \`dispose\`)
 *   Are called at precise points during the InstantSearch.js global lifecycle.

 *   Can be called internally anytime by InstantSearch.
 */
export const connectDatePicker: DatePickerConnector =
  function connectDatePicker(renderFn, unmountFn = () => {}) {
    return (widgetParams) => {
      const {
        // TODO: read from connector parameters
      } = widgetParams;

      return {
        $$type: 'algolia.date-picker',
        /*
         * Sets up the widget during the InstantSearch initialization.
         * It is called before the first search and is a good place to call the \`renderFn\` function to set up the initial DOM (a placeholder for example).
         */
        init(initOptions) {
          const { instantSearchInstance } = initOptions;

          renderFn(
            {
              ...this.getWidgetRenderState(initOptions),
              instantSearchInstance,
            },
            true
          );
        },

        /*
         * Re-render the widget with the new information from the search, including results.
         * This method is called each time we receive results from Algolia.
         */
        render(renderOptions) {
          const { instantSearchInstance } = renderOptions;

          renderFn(
            {
              ...this.getWidgetRenderState(renderOptions),
              instantSearchInstance,
            },
            false
          );
        },

        /*
         * Called when this widget is unmounted.
         * Can be used to remove refinements set by during this widget's initialization and life time.
         */
        dispose() {
          unmountFn();
        },

        /*
         * Derive a \`uiState\` for this widget based on the existing \`uiState\` and the search parameters applied.
         * This method is required for a widget to be taken in account for routing.
         * This method can be called internally anytime by InstantSearch and to avoid any issues they must be defined as pure functions.
         */
        getWidgetUiState(uiState, { searchParameters }) {
          return {
            ...uiState,
            datePicker: {
              // TODO: add this widget's ui state
            },
          };
        },

        /*
         * It receives the current UiState and applied search parameters, and is
         * expected to return a new search parameters.
         * This method is required for a widget to be taken in account for routing.
         */
        getWidgetSearchParameters(searchParameters, { uiState }) {
          // add this widget's search parameters
          return searchParameters;
        },

        /*
         * Returns IndexRenderState of the current index component tree to build the render state of the whole app.
         * This method is required for a widget to be taken in account for routing.
         * This method can be called internally anytime by InstantSearch and to avoid any issues they must be defined as pure functions.
         */
        getRenderState(renderState, renderOptions) {
          return {
            ...renderState,
            datePicker: {
              // TODO: call this.getWidgetRenderState(renderOptions), possibly nested per attribute
            },
          };
        },

        /*
         * Returns the render state of the current widget.
         * The render state will be passed to the \`renderFn\` function by the \`init\` and \`render\` methods.
         * This method can be called internally anytime by InstantSearch and to avoid any issues they must be defined as pure functions.
         */
        getWidgetRenderState({ results }) {
          if (!results) {
            // default rendering state without results
            return {
              widgetParams,
            };
          }

          // rendering state when there are results
          return {
            widgetParams,
          };
        },
      };
    };
  };"
`;

exports[`Templates InstantSearch.js widget File content: src/index.ts 1`] = `
"export * from './widget';
export * from './connector';
export * from './renderer';
export * from './types';"
`;

exports[`Templates InstantSearch.js widget File content: src/renderer.ts 1`] = `
"import type { DatePickerRendererCreator } from './types';

/*
 * Creates the render and dispose functions
 * This function is called once by the connector when the widget is created and is returning
 *  - the \`render\` function used to render the widget
 *  - the \`dispose\` function used to clean the changes made by the widget
 * It can also be used to keep references of objects that must be reused between renders
 */
export const createDatePickerRenderer: DatePickerRendererCreator = ({
  container,
}) => {
  const containerNode: Element =
    typeof container === 'string'
      ? document.querySelector(container)!
      : container;

  const root = document.createElement('div');

  return {
    /*
     * The render function passed to the connector
     * This function is called when we need to render the widget.
     * The render appends when:
     * - the widget is added to InstantSearch
     * - we receive new results from Algolia
     */
    render(renderOptions, isFirstRender) {
      /*
       * \`renderOptions\` contains all options passed by the connector to the renderer, it contains everything needed for the rendering of the component
       */

      if (isFirstRender) {
        /*
         * When the widget is rendered for the first time \`isFirstRender\` is set to \`true\`
         * This is when we will create everything that must be reused between renders (containers, event listeners, etc.)
         */
        containerNode.appendChild(root);
      }

      /*
       * Rendering
       */
      // TODO: use renderOptions to create this widget's DOM
    },
    /*
     * The dispose function passed to the connector
     * This function is called when the widget is removed from InstantSearch.
     * It must be used to remove any changes made by the render function (DOM changes, global event listeners, etc.)
     */
    dispose() {
      containerNode.removeChild(root);
    },
  };
};"
`;

exports[`Templates InstantSearch.js widget File content: src/types.ts 1`] = `
"import type { Renderer, Connector, WidgetFactory } from 'instantsearch.js/es';

/*
 * Parameters send only to the widget creator function
 * These parameters will be used by the widget creator to create the widget renderer and factory
 */
export type DatePickerWidgetParams = {
  container: Element | string;
  // TODO: add the widget params
};

/*
 * Parameters send to the widget creator function
 * These parameters will be used by the widget creator to manage the widget logic
 */
export type DatePickerConnectorParams = {
  // TODO: add the widget params
};

export type DatePickerRenderState = {
  // TODO: add the render state params
};

type DatePickerWidgetDescription = {
  $$type: 'algolia.date-picker';
  renderState: DatePickerRenderState;
  indexRenderState: {
    datePicker: {
      // TODO: add the return type of getRenderState
    };
  };
  indexUiState: {
    datePicker: {
      // TODO: add the return type of getWidgetUiState
    };
  };
};

/*
 * Connector type, constructed from the Renderer and Connector parameters
 */
export type DatePickerConnector = Connector<
  DatePickerWidgetDescription,
  DatePickerConnectorParams
>;

/*
 * Renderer type, constructed from the Renderer and Connector parameters
 */
export type DatePickerRendererCreator = (
  widgetParams: DatePickerWidgetParams
) => {
  render: Renderer<
    DatePickerWidgetDescription['renderState'],
    DatePickerConnectorParams
  >;
  dispose: () => void;
};

/*
 * Widget type, constructed from the Renderer, Connector and Widget parameters
 */
export type DatePickerWidgetCreator = WidgetFactory<
  DatePickerWidgetDescription & {
    $$widgetType: 'algolia.date-picker';
  },
  DatePickerConnectorParams,
  DatePickerWidgetParams
>;"
`;

exports[`Templates InstantSearch.js widget File content: src/widget.ts 1`] = `
"import { connectDatePicker } from './connector';
import { createDatePickerRenderer } from './renderer';
import type {
  DatePickerWidgetCreator,
  DatePickerConnectorParams,
  DatePickerWidgetParams,
} from './types';

/*
 * Widget creator
 * Returns a widget instance
 */
export const datePicker: DatePickerWidgetCreator = function DatePicker(
  widgetParams
) {
  const rendererWidgetParams: DatePickerWidgetParams = {
    container: widgetParams.container,
    // TODO: pick the widget-only parameters from the widgetParams
  };

  const { render, dispose } = createDatePickerRenderer(rendererWidgetParams);

  const createWidget = connectDatePicker(render, dispose);

  const connectorParams: DatePickerConnectorParams = {
    // TODO: pick the connector-only parameters from the widgetParams
  };

  return {
    ...createWidget(connectorParams),
    $$widgetType: 'algolia.date-picker',
  };
};"
`;

exports[`Templates InstantSearch.js widget File content: tsconfig.declaration.json 1`] = `
"{
  \\"extends\\": \\"./tsconfig\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"dist/_types\\",
    \\"stripInternal\\": true,
    \\"noEmit\\": false,
    \\"declaration\\": true,
    \\"emitDeclarationOnly\\": true,
    \\"declarationMap\\": true
  },
  \\"include\\": [\\"src\\"],
  \\"exclude\\": [\\"**/__tests__\\",\\"**/index.cjs.ts\\"]
}"
`;

exports[`Templates InstantSearch.js widget File content: tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"ESNext\\",
    \\"moduleResolution\\": \\"node\\",
    \\"noEmit\\": true,
    \\"strict\\": true,
    \\"skipLibCheck\\": true,
    \\"allowSyntheticDefaultImports\\": true
  },
  \\"exclude\\": [\\"dist\\"]
}"
`;

exports[`Templates InstantSearch.js widget File content: vite.config.js 1`] = `
"import { fileURLToPath } from 'url';

import typescript from '@rollup/plugin-typescript';
import apiExtractor from 'rollup-plugin-api-extractor';
import vite from 'vite';

// https://vitejs.dev/config/
export default vite.defineConfig({
  build: {
    lib: {
      entry: fileURLToPath(new URL('src/index.ts', import.meta.url)),
      name: 'DatePicker',
      fileName: 'index',
      formats: ['es', 'cjs', 'umd'],
    },
    rollupOptions: {
      // make sure to externalize deps that shouldn't be bundled
      // into your library
      external: ['instantsearch.js'],
      output: {
        globals: {
          'instantsearch.js': 'instantsearch',
        },
      },
    },
  },
  plugins: [
    typescript({ tsconfig: 'tsconfig.declaration.json' }),
    apiExtractor.apiExtractor(),
  ],
});"
`;

exports[`Templates InstantSearch.js widget Folder structure: contains the right files 1`] = `
Array [
  ".eslintignore",
  ".eslintrc.cjs",
  ".gitignore",
  ".prettierrc",
  "CONTRIBUTING.md",
  "LICENSE.md",
  "README.md",
  "babel.config.cjs",
  "config/api-extractor.json",
  "example/index.css",
  "example/index.html",
  "example/index.ts",
  "package.json",
  "src/connector.ts",
  "src/index.ts",
  "src/renderer.ts",
  "src/types.ts",
  "src/widget.ts",
  "tsconfig.declaration.json",
  "tsconfig.json",
  "vite.config.js",
]
`;

exports[`Templates JavaScript Client File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates JavaScript Client File content: .eslintignore 1`] = `
"/node_modules
/dist
/.cache"
`;

exports[`Templates JavaScript Client File content: .eslintrc.js 1`] = `
"module.exports = {
  extends: 'algolia',
};"
`;

exports[`Templates JavaScript Client File content: .gitignore 1`] = `
"# See https://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules

# testing
/coverage

# production
/dist
/.cache

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*"
`;

exports[`Templates JavaScript Client File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates JavaScript Client File content: README.md 1`] = `
"# javascript-client-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates JavaScript Client File content: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">

<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">
  <meta name=\\"theme-color\\" content=\\"#000000\\">

  <link rel=\\"manifest\\" href=\\"./manifest.webmanifest\\">
  <link rel=\\"shortcut icon\\" href=\\"./favicon.png\\">

  <link rel=\\"stylesheet\\" href=\\"./src/index.css\\">
  <link rel=\\"stylesheet\\" href=\\"./src/app.css\\">

  <title>javascript-client-app</title>
</head>

<body>
  <header class=\\"header\\">
    <h1 class=\\"header-title\\">
      <a href=\\"/\\">javascript-client-app</a>
    </h1>
    <p class=\\"header-subtitle\\">using the
      <a href=\\"https://github.com/algolia/algoliasearch-client-javascript\\">Algolia Search API Client for JavaScript</a>
    </p>
  </header>

  <div class=\\"container\\">
    <div class=\\"container-app\\">
      <div class=\\"filters\\"></div>

      <div class=\\"search-container\\">
        <div id=\\"searchBox\\">
          <form role=\\"search\\">
            <input type=\\"search\\" placeholder=\\"Search placeholder\\" />
          </form>
        </div>
        <div id=\\"hits\\"></div>
      </div>
    </div>
  </div>

  <script src=\\"./src/app.js\\"></script>
</body>

</html>"
`;

exports[`Templates JavaScript Client File content: manifest.webmanifest 1`] = `
"{
  \\"short_name\\": \\"javascript-client-app\\",
  \\"name\\": \\"javascript-client-app Sample\\",
  \\"icons\\": [
    {
      \\"src\\": \\"favicon.png\\",
      \\"sizes\\": \\"64x64 32x32 24x24 16x16\\",
      \\"type\\": \\"image/x-icon\\"
    }
  ],
  \\"start_url\\": \\"./index.html\\",
  \\"display\\": \\"standalone\\",
  \\"theme_color\\": \\"#000000\\",
  \\"background_color\\": \\"#ffffff\\"
}"
`;

exports[`Templates JavaScript Client File content: package.json 1`] = `
"{
  \\"name\\": \\"javascript-client-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"main\\": \\"src/app.js\\",
  \\"scripts\\": {
    \\"start\\": \\"parcel index.html --port 3000\\",
    \\"build\\": \\"parcel build index.html\\",
    \\"lint\\": \\"eslint .\\",
    \\"lint:fix\\": \\"npm run lint -- --fix\\"
  },
  \\"partialDependencies\\": {
    \\"algoliasearch\\": \\"2.1.0\\"
  }
}"
`;

exports[`Templates JavaScript Client File content: src/app.css 1`] = `
"em {
  background: cyan;
  font-style: normal;
}

.header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(73deg, #3369e7, #1cc7d0);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.container-app {
  display: grid;
}

#searchBox input[type='search'] {
  width: 100%;
  padding: 12px;
  font: inherit;
  border-radius: 2px;
  border: 1px solid rgba(150, 150, 150, 0.16);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.16);
}

.ais-hits {
  display: grid;
  grid-template-columns: 49% 49%;
  grid-gap: 2%;
  padding: 0;
  margin: 0;
}

.ais-hits--item {
  list-style: none;
  min-height: 100px;
  padding: 1rem;
  background: #fff;
  border-radius: 4px;
  border: 1px solid rgba(150, 150, 150, 0.16);
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.16);
  margin-bottom: 1rem;
}

#searchBox {
  margin-bottom: 2rem;
}"
`;

exports[`Templates JavaScript Client File content: src/app.js 1`] = `
"import algoliasearch from 'algoliasearch';

const client = algoliasearch('appId', 'apiKey');
const index = client.initIndex('indexName');

const $searchBox = document.querySelector('#searchBox input[type=search]');
const $hits = document.querySelector('#hits');

function renderHits(query) {
  index.search(query).then((result) => {
    // Please sanitize user-provided data when using \`innerHTML\` to avoid XSS
    $hits.innerHTML = \`
      <ol class=\\"ais-hits\\">
        \${result.hits
          .map(
            (hit) =>
              \`<li class=\\"ais-hits--item\\">
                <article>
                  <h1>\${hit._highlightResult.attribute1.value}</h1>
                  <p>\${hit._highlightResult.attribute2.value}</p>
                </article>
              </li>\`
          )
          .join('')}
      </ol>\`;
  });
}

$searchBox.addEventListener('input', (event) => {
  const query = event.target.value;

  renderHits(query);
});

renderHits('');"
`;

exports[`Templates JavaScript Client File content: src/index.css 1`] = `
"body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}"
`;

exports[`Templates JavaScript Client Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".eslintignore",
  ".eslintrc.js",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "favicon.png",
  "index.html",
  "manifest.webmanifest",
  "package.json",
  "src/app.css",
  "src/app.js",
  "src/index.css",
]
`;

exports[`Templates JavaScript Helper File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates JavaScript Helper File content: .eslintignore 1`] = `
"/node_modules
/dist
/.cache"
`;

exports[`Templates JavaScript Helper File content: .eslintrc.js 1`] = `
"module.exports = {
  extends: 'algolia',
};"
`;

exports[`Templates JavaScript Helper File content: .gitignore 1`] = `
"# See https://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules

# testing
/coverage

# production
/dist
/.cache

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*"
`;

exports[`Templates JavaScript Helper File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates JavaScript Helper File content: README.md 1`] = `
"# javascript-helper-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates JavaScript Helper File content: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">

<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">
  <meta name=\\"theme-color\\" content=\\"#000000\\">

  <link rel=\\"manifest\\" href=\\"./manifest.webmanifest\\">
  <link rel=\\"shortcut icon\\" href=\\"./favicon.png\\">

  <link rel=\\"stylesheet\\" href=\\"./src/index.css\\">
  <link rel=\\"stylesheet\\" href=\\"./src/app.css\\">

  <title>javascript-helper-app</title>
</head>

<body>
  <header class=\\"header\\">
    <h1 class=\\"header-title\\">
      <a href=\\"/\\">javascript-helper-app</a>
    </h1>
    <p class=\\"header-subtitle\\">using the
      <a href=\\"https://github.com/algolia/algoliasearch-helper-js\\">Algolia Search Helper for JavaScript</a>
    </p>
  </header>

  <div class=\\"container\\">
    <div class=\\"container-app\\">
      <div id=\\"searchBox\\">
        <form role=\\"search\\">
          <input type=\\"search\\" placeholder=\\"Search placeholder\\" />
        </form>
      </div>
      <div id=\\"hits\\"></div>
    </div>
  </div>

  <script src=\\"./src/app.js\\"></script>
</body>

</html>"
`;

exports[`Templates JavaScript Helper File content: manifest.webmanifest 1`] = `
"{
  \\"short_name\\": \\"javascript-helper-app\\",
  \\"name\\": \\"javascript-helper-app Sample\\",
  \\"icons\\": [
    {
      \\"src\\": \\"favicon.png\\",
      \\"sizes\\": \\"64x64 32x32 24x24 16x16\\",
      \\"type\\": \\"image/x-icon\\"
    }
  ],
  \\"start_url\\": \\"./index.html\\",
  \\"display\\": \\"standalone\\",
  \\"theme_color\\": \\"#000000\\",
  \\"background_color\\": \\"#ffffff\\"
}"
`;

exports[`Templates JavaScript Helper File content: package.json 1`] = `
"{
  \\"name\\": \\"javascript-helper-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"main\\": \\"src/app.js\\",
  \\"scripts\\": {
    \\"start\\": \\"parcel index.html --port 3000\\",
    \\"build\\": \\"parcel build index.html\\",
    \\"lint\\": \\"eslint .\\",
    \\"lint:fix\\": \\"npm run lint -- --fix\\"
  },
  \\"partialDependencies\\": {
    \\"algoliasearch-helper\\": \\"3.0.0\\"
  }
}"
`;

exports[`Templates JavaScript Helper File content: src/app.css 1`] = `
"em {
  background: cyan;
  font-style: normal;
}

.header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(73deg, #3369e7, #1cc7d0);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.container-app {
  display: grid;
}

#searchBox input[type='search'] {
  width: 100%;
  padding: 12px;
  font: inherit;
  border-radius: 2px;
  border: 1px solid rgba(150, 150, 150, 0.16);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.16);
}

.ais-hits {
  display: grid;
  grid-template-columns: 49% 49%;
  grid-gap: 2%;
  padding: 0;
  margin: 0;
}

.ais-hits--item {
  list-style: none;
  padding: 1rem;
  background: #fff;
  border-radius: 4px;
  border: 1px solid rgba(150, 150, 150, 0.16);
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.16);
  margin-bottom: 1rem;
}

#searchBox {
  margin-bottom: 2rem;
}"
`;

exports[`Templates JavaScript Helper File content: src/app.js 1`] = `
"import algoliasearch from 'algoliasearch';
import algoliasearchHelper from 'algoliasearch-helper';

const client = algoliasearch('appId', 'apiKey');
const helper = algoliasearchHelper(client, 'indexName');

const $searchBox = document.querySelector('#searchBox input[type=search]');
const $hits = document.querySelector('#hits');

$searchBox.addEventListener('input', (event) => {
  const query = event.target.value;

  helper.setQuery(query).search();
});

helper.on('result', ({ results }) => {
  // Please sanitize user-provided data when using \`innerHTML\` to avoid XSS
  $hits.innerHTML = \`
    <ol class=\\"ais-hits\\">
      \${results.hits
        .map(
          (hit) =>
            \`<li class=\\"ais-hits--item\\">
              <article>
                <h1>\${hit._highlightResult.attribute1.value}</h1>
                <p>\${hit._highlightResult.attribute2.value}</p>
              </article>
            </li>\`
        )
        .join('')}
    </ol>\`;
});

helper.search();"
`;

exports[`Templates JavaScript Helper File content: src/index.css 1`] = `
"body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}"
`;

exports[`Templates JavaScript Helper Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".eslintignore",
  ".eslintrc.js",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "favicon.png",
  "index.html",
  "manifest.webmanifest",
  "package.json",
  "src/app.css",
  "src/app.js",
  "src/index.css",
]
`;

exports[`Templates React InstantSearch File content: .editorconfig 1`] = `
"root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates React InstantSearch File content: .gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
.parcel-cache
*.local

# Editor directories and files
.vscode
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?"
`;

exports[`Templates React InstantSearch File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates React InstantSearch File content: README.md 1`] = `
"# react-instantsearch-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`"
`;

exports[`Templates React InstantSearch File content: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <meta
      name=\\"viewport\\"
      content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\"
    />

    <link rel=\\"shortcut icon\\" href=\\"favicon.png\\" />

    <!--
    Do not use @7 in production, use a complete version like x.x.x, see website for latest version:
    https://www.algolia.com/doc/guides/building-search-ui/installation/react/#load-the-style
    -->
    <link
      rel=\\"stylesheet\\"
      href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/satellite-min.css\\"
    />

    <title>react-instantsearch-app</title>
  </head>

  <body>
    <noscript> You need to enable JavaScript to run this app. </noscript>

    <div id=\\"root\\"></div>

    <script type=\\"module\\" src=\\"src/index.tsx\\"></script>
  </body>
</html>"
`;

exports[`Templates React InstantSearch File content: package.json 1`] = `
"{
  \\"name\\": \\"react-instantsearch-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"build\\": \\"parcel build index.html\\",
    \\"start\\": \\"parcel index.html\\"
  },
  \\"partialDependencies\\": {
    \\"react-instantsearch\\": \\"7.0.0\\"
  }
}"
`;

exports[`Templates React InstantSearch File content: src/App.css 1`] = `
"body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}

em {
  background: cyan;
  font-style: normal;
}

.header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(to right, #8e43e7, #00aeff);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.search-panel {
  display: flex;
}

.search-panel__filters {
  flex: 1;
}

.search-panel__results {
  flex: 3;
}

.searchbox {
  margin-bottom: 2rem;
}

.pagination {
  margin: 2rem auto;
  text-align: center;
}"
`;

exports[`Templates React InstantSearch File content: src/App.tsx 1`] = `
"import React from 'react';
import algoliasearch from 'algoliasearch/lite';
import {
  Configure,
  DynamicWidgets,
  Highlight,
  Hits,
  InstantSearch,
  Pagination,
  RefinementList,
  SearchBox,
} from 'react-instantsearch';

import { Panel } from './Panel';

import type { Hit } from 'instantsearch.js';

import './App.css';

const searchClient = algoliasearch('appId', 'apiKey');

const future = { preserveSharedStateOnUnmount: true };

export function App() {
  return (
    <div>
      <header className=\\"header\\">
        <h1 className=\\"header-title\\">
          <a href=\\"/\\">react-instantsearch-app</a>
        </h1>
        <p className=\\"header-subtitle\\">
          using{' '}
          <a href=\\"https://github.com/algolia/instantsearch/tree/master/packages/react-instantsearch\\">
            React InstantSearch
          </a>
        </p>
      </header>

      <div className=\\"container\\">
        <InstantSearch
          searchClient={searchClient}
          indexName=\\"indexName\\"
          future={future}
          insights
        >
          <Configure hitsPerPage={8} />
          <div className=\\"search-panel\\">
            <div className=\\"search-panel__filters\\">
              <DynamicWidgets fallback={RefinementList}>
                <Panel header=\\"facet1\\">
                  <RefinementList attribute=\\"facet1\\" />
                </Panel>
                <Panel header=\\"facet2\\">
                  <RefinementList attribute=\\"facet2\\" />
                </Panel>
              </DynamicWidgets>
            </div>

            <div className=\\"search-panel__results\\">
              <SearchBox
                placeholder=\\"Search placeholder\\"
                className=\\"searchbox\\"
              />
              <Hits hitComponent={Hit} />

              <div className=\\"pagination\\">
                <Pagination />
              </div>
            </div>
          </div>
        </InstantSearch>
      </div>
    </div>
  );
}

type HitProps = {
  hit: Hit;
};

function Hit({ hit }: HitProps) {
  return (
    <article>
      <h1>
        <Highlight attribute=\\"attribute1\\" hit={hit} />
      </h1>
      <p>
        <Highlight attribute=\\"attribute2\\" hit={hit} />
      </p>
    </article>
  );
}"
`;

exports[`Templates React InstantSearch File content: src/Panel.tsx 1`] = `
"import React from 'react';

type PanelProps = React.PropsWithChildren<{
  header: string;
}>;

export function Panel({ header, children }: PanelProps) {
  return (
    <div className=\\"ais-Panel\\">
      <div className=\\"ais-Panel-header\\">
        <span>{header}</span>
      </div>
      <div className=\\"ais-Panel-body\\">{children}</div>
    </div>
  );
}"
`;

exports[`Templates React InstantSearch File content: src/index.tsx 1`] = `
"import React from 'react';
import { createRoot } from 'react-dom/client';

import { App } from './App';

createRoot(document.getElementById('root')!).render(<App />);"
`;

exports[`Templates React InstantSearch Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "favicon.png",
  "index.html",
  "package.json",
  "src/App.css",
  "src/App.tsx",
  "src/Panel.tsx",
  "src/index.tsx",
]
`;

exports[`Templates React InstantSearch Native File content: .expo-shared/assets.json 1`] = `
"{
  \\"12bb71342c6255bbf50437ec8f4441c083f47cdb74bd89160c15e4f43e52a1cb\\": true,
  \\"40b842e832070c58deac6aa9e08fa459302ee3f9da492c7e77d93d2fbf4a56fd\\": true
}"
`;

exports[`Templates React InstantSearch Native File content: .gitignore 1`] = `
"node_modules/
.expo/
dist/
npm-debug.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
web-build/

# macOS
.DS_Store"
`;

exports[`Templates React InstantSearch Native File content: App.tsx 1`] = `
"import React, { useRef } from 'react';
import { FlatList, SafeAreaView, StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import algoliasearch from 'algoliasearch/lite';
import { InstantSearch } from 'react-instantsearch-core';

import { InfiniteHits } from './src/InfiniteHits';
import { SearchBox } from './src/SearchBox';
import { Highlight } from './src/Highlight';
import { ProductHit } from './types/ProductHit';

const searchClient = algoliasearch(
  'appId',
  'apiKey'
);

export default function App() {
  const listRef = useRef<FlatList>(null);

  return (
    <SafeAreaView style={styles.safe}>
      <StatusBar style=\\"light\\" />
      <View style={styles.container}>
        <InstantSearch searchClient={searchClient} indexName=\\"indexName\\">
          <SearchBox
            onChange={() =>
              listRef.current?.scrollToOffset({ animated: false, offset: 0 })
            }
          />
          <InfiniteHits ref={listRef} hitComponent={Hit} />
        </InstantSearch>
      </View>
    </SafeAreaView>
  );
}

type HitProps = {
  hit: ProductHit;
};

function Hit({ hit }: HitProps) {
  return (
    <>
      <Text>
        <Highlight hit={hit} attribute=\\"attribute1\\" />
      </Text>
      <Text>
        <Highlight hit={hit} attribute=\\"attribute2\\" />
      </Text>
    </>
  );
}

const styles = StyleSheet.create({
  safe: {
    flex: 1,
    backgroundColor: '#252b33',
  },
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
    flexDirection: 'column',
  },
});"
`;

exports[`Templates React InstantSearch Native File content: README.md 1`] = `
"# react-instantsearch-native-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`"
`;

exports[`Templates React InstantSearch Native File content: app.json 1`] = `
"{
  \\"expo\\": {
    \\"name\\": \\"react-instantsearch-native-app\\",
    \\"slug\\": \\"react-instantsearch-native-app\\",
    \\"version\\": \\"1.0.0\\",
    \\"orientation\\": \\"portrait\\",
    \\"icon\\": \\"./assets/icon.png\\",
    \\"splash\\": {
      \\"image\\": \\"./assets/splash.png\\",
      \\"resizeMode\\": \\"contain\\",
      \\"backgroundColor\\": \\"#ffffff\\"
    },
    \\"updates\\": {
      \\"fallbackToCacheTimeout\\": 0
    },
    \\"assetBundlePatterns\\": [\\"**/*\\"],
    \\"ios\\": {
      \\"supportsTablet\\": true
    },
    \\"android\\": {
      \\"adaptiveIcon\\": {
        \\"foregroundImage\\": \\"./assets/adaptive-icon.png\\",
        \\"backgroundColor\\": \\"#FFFFFF\\"
      }
    },
    \\"web\\": {
      \\"favicon\\": \\"./assets/favicon.png\\"
    }
  }
}"
`;

exports[`Templates React InstantSearch Native File content: babel.config.js 1`] = `
"module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};"
`;

exports[`Templates React InstantSearch Native File content: package.json 1`] = `
"{
  \\"name\\": \\"react-instantsearch-native-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"main\\": \\"node_modules/expo/AppEntry.js\\",
  \\"scripts\\": {
    \\"start\\": \\"expo start\\",
    \\"android\\": \\"expo start --android\\",
    \\"ios\\": \\"expo start --ios\\",
    \\"web\\": \\"expo start --web\\",
    \\"eject\\": \\"expo eject\\"
  },
  \\"partialDependencies\\": {
    \\"react-instantsearch-core\\": \\"7.0.0\\"
  }
}"
`;

exports[`Templates React InstantSearch Native File content: src/Highlight.tsx 1`] = `
"import React, { Fragment } from 'react';
import { StyleSheet, Text } from 'react-native';
import { Hit as AlgoliaHit } from '@algolia/client-search';
import {
  getHighlightedParts,
  getPropertyByPath,
} from 'instantsearch.js/es/lib/utils';

type HighlightPartProps = {
  children: React.ReactNode;
  isHighlighted: boolean;
};

function HighlightPart({ children, isHighlighted }: HighlightPartProps) {
  return (
    <Text style={isHighlighted ? styles.highlighted : styles.nonHighlighted}>
      {children}
    </Text>
  );
}

type HighlightProps<THit> = {
  hit: THit;
  attribute: keyof THit | string[];
  className?: string;
  separator?: string;
};

export function Highlight<THit extends AlgoliaHit<Record<string, unknown>>>({
  hit,
  attribute,
  separator = ', ',
}: HighlightProps<THit>) {
  const { value: attributeValue = '' } =
    getPropertyByPath(hit._highlightResult, attribute as string) || {};
  const parts = getHighlightedParts(attributeValue);

  return (
    <>
      {parts.map((part, partIndex) => {
        if (Array.isArray(part)) {
          const isLastPart = partIndex === parts.length - 1;

          return (
            <Fragment key={partIndex}>
              {part.map((subPart, subPartIndex) => (
                <HighlightPart
                  key={subPartIndex}
                  isHighlighted={subPart.isHighlighted}
                >
                  {subPart.value}
                </HighlightPart>
              ))}

              {!isLastPart && separator}
            </Fragment>
          );
        }

        return (
          <HighlightPart key={partIndex} isHighlighted={part.isHighlighted}>
            {part.value}
          </HighlightPart>
        );
      })}
    </>
  );
}

const styles = StyleSheet.create({
  highlighted: {
    fontWeight: 'bold',
    backgroundColor: '#f5df4d',
    color: '#6f6106',
  },
  nonHighlighted: {
    fontWeight: 'normal',
    backgroundColor: 'transparent',
    color: 'black',
  },
});"
`;

exports[`Templates React InstantSearch Native File content: src/InfiniteHits.tsx 1`] = `
"import React, { forwardRef } from 'react';
import { StyleSheet, View, FlatList } from 'react-native';
import { Hit as AlgoliaHit } from '@algolia/client-search';
import {
  useInfiniteHits,
  UseInfiniteHitsProps,
} from 'react-instantsearch-core';

type InfiniteHitsProps<THit> = UseInfiniteHitsProps & {
  hitComponent: (props: { hit: THit }) => JSX.Element;
};

export const InfiniteHits = forwardRef(
  <THit extends AlgoliaHit<Record<string, unknown>>>(
    { hitComponent: Hit, ...props }: InfiniteHitsProps<THit>,
    ref: React.ForwardedRef<FlatList<THit>>
  ) => {
    const { hits, isLastPage, showMore } = useInfiniteHits(props);

    return (
      <FlatList
        ref={ref}
        data={hits as unknown as THit[]}
        keyExtractor={(item) => item.objectID}
        ItemSeparatorComponent={() => <View style={styles.separator} />}
        onEndReached={() => {
          if (!isLastPage) {
            showMore();
          }
        }}
        renderItem={({ item }) => (
          <View style={styles.item}>
            <Hit hit={item as unknown as THit} />
          </View>
        )}
      />
    );
  }
);

const styles = StyleSheet.create({
  separator: {
    borderBottomWidth: 1,
    borderColor: '#ddd',
  },
  item: {
    padding: 18,
  },
});

declare module 'react' {
  // eslint-disable-next-line no-shadow
  function forwardRef<TRef, TProps = unknown>(
    render: (props: TProps, ref: React.Ref<TRef>) => React.ReactElement | null
  ): (props: TProps & React.RefAttributes<TRef>) => React.ReactElement | null;
}"
`;

exports[`Templates React InstantSearch Native File content: src/SearchBox.tsx 1`] = `
"import React, { useEffect, useRef, useState } from 'react';
import { StyleSheet, View, TextInput } from 'react-native';
import { useSearchBox, UseSearchBoxProps } from 'react-instantsearch-core';

type SearchBoxProps = UseSearchBoxProps & {
  onChange: (newValue: string) => void;
};

export function SearchBox({ onChange, ...props }: SearchBoxProps) {
  const { query, refine } = useSearchBox(props);
  const [value, setValue] = useState(query);
  const inputRef = useRef<TextInput>(null);

  // Track when the value coming from the React state changes to synchronize
  // it with InstantSearch.
  useEffect(() => {
    if (query !== value) {
      refine(value);
    }
    // We don't want to track when the React state value changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value, refine]);

  // Track when the InstantSearch query changes to synchronize it with
  // the React state.
  useEffect(() => {
    // We bypass the state update if the input is focused to avoid concurrent
    // updates when typing.
    if (!inputRef.current?.isFocused() && query !== value) {
      setValue(query);
    }
    // We don't want to track when the React state value changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [query]);

  return (
    <View style={styles.container}>
      <TextInput
        ref={inputRef}
        style={styles.input}
        value={value}
        onChangeText={newValue => {
          setValue(newValue);
          onChange(newValue);
        }}
        clearButtonMode=\\"while-editing\\"
        autoCapitalize=\\"none\\"
        autoCorrect={false}
        spellCheck={false}
        autoCompleteType=\\"off\\"
        placeholder=\\"Search placeholder\\"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#252b33',
    padding: 18,
  },
  input: {
    height: 48,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#fff',
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#ddd',
  },
});"
`;

exports[`Templates React InstantSearch Native File content: tsconfig.json 1`] = `
"{
  \\"extends\\": \\"expo/tsconfig.base\\",
  \\"compilerOptions\\": {
    \\"strict\\": true
  }
}"
`;

exports[`Templates React InstantSearch Native File content: types/ProductHit.ts 1`] = `
"import { Hit as AlgoliaHit } from '@algolia/client-search';

export type ProductHit = AlgoliaHit<{
  brand: string;
  categories: string[];
  comments: number;
  description: string;
  free_shipping: boolean;
  hierarchicalCategories: {
    lvl0: string;
    lvl1?: string;
    lvl2?: string;
    lvl3?: string;
    lvl4?: string;
    lvl5?: string;
    lvl6?: string;
  };
  image: string;
  name: string;
  popularity: number;
  price: number;
  prince_range: string;
  rating: number;
  sale: boolean;
  sale_price: string;
  type: string;
  url: string;
}>;"
`;

exports[`Templates React InstantSearch Native Folder structure: contains the right files 1`] = `
Array [
  ".expo-shared/assets.json",
  ".gitignore",
  "App.tsx",
  "README.md",
  "app.json",
  "assets/adaptive-icon.png",
  "assets/favicon.png",
  "assets/icon.png",
  "assets/splash.png",
  "babel.config.js",
  "package.json",
  "src/Highlight.tsx",
  "src/InfiniteHits.tsx",
  "src/SearchBox.tsx",
  "tsconfig.json",
  "types/ProductHit.ts",
]
`;

exports[`Templates Vue InstantSearch File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates Vue InstantSearch File content: .eslintrc.js 1`] = `
"module.exports = {
  // extends from 'prettier/vue' until we update the Algolia configuration
  extends: ['algolia/vue', 'prettier/vue'],
  rules: {
    'import/no-commonjs': 'off',
    // enable the rule until we update the Algolia configuration
    'vue/component-name-in-template-casing': ['error', 'kebab-case'],
  },
};"
`;

exports[`Templates Vue InstantSearch File content: .gitignore 1`] = `
".DS_Store
node_modules
/dist

# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?"
`;

exports[`Templates Vue InstantSearch File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates Vue InstantSearch File content: README.md 1`] = `
"# vue-instantsearch-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates Vue InstantSearch File content: babel.config.js 1`] = `
"module.exports = {
  presets: ['@vue/app'],
};"
`;

exports[`Templates Vue InstantSearch File content: package.json 1`] = `
"{
  \\"name\\": \\"vue-instantsearch-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"start\\": \\"vue-cli-service serve --port 3000\\",
    \\"build\\": \\"vue-cli-service build\\",
    \\"lint\\": \\"vue-cli-service lint\\",
    \\"lint:fix\\": \\"npm run lint -- --fix\\"
  },
  \\"browserslist\\": [
    \\"> 1%\\",
    \\"last 2 versions\\",
    \\"not ie <= 8\\"
  ],
  \\"partialDependencies\\": {
    \\"vue-instantsearch\\": \\"3.0.0\\"
  }
}"
`;

exports[`Templates Vue InstantSearch File content: public/index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1.0\\" />
    <link rel=\\"icon\\" href=\\"<%= BASE_URL %>favicon.png\\" />
    <!--
      Do not use @7 in production, use a complete version like x.x.x, see website for latest version:
      https://www.algolia.com/doc/guides/building-search-ui/installation/react/#load-the-style
    -->
    <link
      rel=\\"stylesheet\\"
      href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/satellite-min.css\\"
    />
    <title>vue-instantsearch-app</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but vue-instantsearch-app doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id=\\"app\\"></div>
    <!-- built files will be auto injected -->
  </body>
</html>"
`;

exports[`Templates Vue InstantSearch File content: src/App.vue 1`] = `
"<template>
  <div>
    <header class=\\"header\\">
      <h1 class=\\"header-title\\">
        <a href=\\"/\\"> vue-instantsearch-app </a>
      </h1>
      <p class=\\"header-subtitle\\">
        using
        <a
          href=\\"https://github.com/algolia/instantsearch/tree/master/packages/vue-instantsearch\\"
        >
          Vue InstantSearch
        </a>
      </p>
    </header>

    <div class=\\"container\\">
      <ais-instant-search
        :search-client=\\"searchClient\\"
        index-name=\\"indexName\\"
        insights
      >
        <ais-configure :hits-per-page.camel=\\"8\\" />
        <div class=\\"search-panel\\">
          <div class=\\"search-panel__filters\\">
            <ais-dynamic-widgets>
              <ais-panel>
                <template v-slot:header>facet1</template>
                <ais-refinement-list attribute=\\"facet1\\" />
              </ais-panel>
              <ais-panel>
                <template v-slot:header>facet2</template>
                <ais-refinement-list attribute=\\"facet2\\" />
              </ais-panel>
            </ais-dynamic-widgets>
          </div>

          <div class=\\"search-panel__results\\">
            <div class=\\"searchbox\\">
              <ais-search-box placeholder=\\"Search placeholder\\" />
            </div>
            <ais-hits>
              <template slot=\\"item\\" slot-scope=\\"{ item }\\">
                <article>
                  <h1>
                    <ais-highlight :hit=\\"item\\" attribute=\\"attribute1\\" />
                  </h1>
                  <p>
                    <ais-highlight :hit=\\"item\\" attribute=\\"attribute2\\" />
                  </p>
                </article>
              </template>
            </ais-hits>

            <div class=\\"pagination\\">
              <ais-pagination />
            </div>
          </div>
        </div>
      </ais-instant-search>
    </div>
  </div>
</template>

<script>
import algoliasearch from 'algoliasearch/lite';

export default {
  data() {
    return {
      searchClient: algoliasearch('appId', 'apiKey'),
    };
  },
};
</script>

<style>
body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}

em {
  background: cyan;
  font-style: normal;
}

.header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(to right, #4dba87, #2f9088);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.search-panel {
  display: flex;
}

.search-panel__filters {
  flex: 1;
}

.search-panel__results {
  flex: 3;
}

.searchbox {
  margin-bottom: 2rem;
}

.pagination {
  margin: 2rem auto;
  text-align: center;
}
</style>"
`;

exports[`Templates Vue InstantSearch File content: src/main.js 1`] = `
"import Vue from 'vue';
import InstantSearch from 'vue-instantsearch';
import App from './App.vue';

Vue.config.productionTip = false;

Vue.use(InstantSearch);

new Vue({
  render: (h) => h(App),
}).$mount('#app');"
`;

exports[`Templates Vue InstantSearch Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".eslintrc.js",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "babel.config.js",
  "package.json",
  "public/favicon.png",
  "public/index.html",
  "src/App.vue",
  "src/main.js",
]
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: .editorconfig 1`] = `
"root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: .gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: .prettierrc 1`] = `
"{
  \\"singleQuote\\": true,
  \\"proseWrap\\": \\"never\\",
  \\"trailingComma\\": \\"es5\\"
}"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: README.md 1`] = `
"# vue-instantsearch-app

_This project was generated with [create-instantsearch-app](https://github.com/algolia/instantsearch/tree/master/packages/create-instantsearch-app) by [Algolia](https://algolia.com)._

## Get started

To run this project locally, install the dependencies and run the local server:

\`\`\`sh
npm install
npm start
\`\`\`

Alternatively, you may use [Yarn](https://http://yarnpkg.com/):

\`\`\`sh
yarn
yarn start
\`\`\`

Open http://localhost:3000 to see your app."
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"UTF-8\\" />
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />
    <link rel=\\"icon\\" href=\\"/favicon.png\\" />
    <!--
      Do not use @7 in production, use a complete version like x.x.x, see website for latest version:
      https://www.algolia.com/doc/guides/building-search-ui/installation/react/#load-the-style
    -->
    <link
      rel=\\"stylesheet\\"
      href=\\"https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/satellite-min.css\\"
    />
    <title>vue-instantsearch-app</title>
  </head>
  <body>
    <div id=\\"app\\"></div>
    <script type=\\"module\\" src=\\"/src/main.js\\"></script>
  </body>
</html>"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: package.json 1`] = `
"{
  \\"name\\": \\"vue-instantsearch-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"dev\\": \\"vite\\",
    \\"start\\": \\"vite\\",
    \\"build\\": \\"vite build\\",
    \\"preview\\": \\"vite preview\\"
  },
  \\"partialDependencies\\": {
    \\"vue-instantsearch\\": \\"4.3.3\\"
  }
}"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: src/App.vue 1`] = `
"<template>
  <div>
    <header class=\\"header\\">
      <h1 class=\\"header-title\\">
        <a href=\\"/\\">vue-instantsearch-app</a>
      </h1>
      <p class=\\"header-subtitle\\">
        using
        <a
          href=\\"https://github.com/algolia/instantsearch/tree/master/packages/vue-instantsearch\\"
        >
          Vue InstantSearch
        </a>
      </p>
    </header>

    <div class=\\"container\\">
      <ais-instant-search
        :search-client=\\"searchClient\\"
        index-name=\\"indexName\\"
        :future=\\"future\\"
        insights
      >
        <ais-configure :hits-per-page.camel=\\"8\\" />
        <div class=\\"search-panel\\">
          <div class=\\"search-panel__filters\\">
            <ais-dynamic-widgets>
              <ais-panel>
                <template v-slot:header>facet1</template>
                <ais-refinement-list attribute=\\"facet1\\" />
              </ais-panel>
              <ais-panel>
                <template v-slot:header>facet2</template>
                <ais-refinement-list attribute=\\"facet2\\" />
              </ais-panel>
            </ais-dynamic-widgets>
          </div>

          <div class=\\"search-panel__results\\">
            <div class=\\"searchbox\\">
              <ais-search-box placeholder=\\"Search placeholder\\" />
            </div>
            <ais-hits>
              <template v-slot:item=\\"{ item }\\">
                <article>
                  <h1>
                    <ais-highlight :hit=\\"item\\" attribute=\\"attribute1\\" />
                  </h1>
                  <p>
                    <ais-highlight :hit=\\"item\\" attribute=\\"attribute2\\" />
                  </p>
                </article>
              </template>
            </ais-hits>

            <div class=\\"pagination\\">
              <ais-pagination />
            </div>
          </div>
        </div>
      </ais-instant-search>
    </div>
  </div>
</template>

<script>
import algoliasearch from 'algoliasearch/lite';

export default {
  data() {
    return {
      searchClient: algoliasearch('appId', 'apiKey'),
      future: { preserveSharedStateOnUnmount: true },
    };
  },
};
</script>

<style>
body,
h1 {
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}

h1 {
  font-size: 1rem;
}

em {
  background: cyan;
  font-style: normal;
}

.header {
  display: flex;
  align-items: center;
  min-height: 50px;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(to right, #4dba87, #2f9088);
  color: #fff;
  margin-bottom: 1rem;
}

.header a {
  color: #fff;
  text-decoration: none;
}

.header-title {
  font-size: 1.2rem;
  font-weight: normal;
}

.header-title::after {
  content: ' â–¸ ';
  padding: 0 0.5rem;
}

.header-subtitle {
  font-size: 1.2rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.search-panel {
  display: flex;
}

.search-panel__filters {
  flex: 1;
}

.search-panel__results {
  flex: 3;
}

.searchbox {
  margin-bottom: 2rem;
}

.pagination {
  margin: 2rem auto;
  text-align: center;
}
</style>"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: src/main.js 1`] = `
"import { createApp } from 'vue';
import InstantSearch from 'vue-instantsearch/vue3/es';
import App from './App.vue';

const app = createApp(App);
app.use(InstantSearch);
app.mount('#app');"
`;

exports[`Templates Vue InstantSearch with Vue 3 File content: vite.config.js 1`] = `
"import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import vueJsx from '@vitejs/plugin-vue-jsx';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue(), vueJsx()],
});"
`;

exports[`Templates Vue InstantSearch with Vue 3 Folder structure: contains the right files 1`] = `
Array [
  ".editorconfig",
  ".gitignore",
  ".prettierrc",
  "README.md",
  "index.html",
  "package.json",
  "public/favicon.png",
  "src/App.vue",
  "src/main.js",
  "vite.config.js",
]
`;
