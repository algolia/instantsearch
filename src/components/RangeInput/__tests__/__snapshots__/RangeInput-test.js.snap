// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RangeInput expect to render 1`] = `
<div
  className="root noRefinement"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput expect to render with disabled state 1`] = `
<div
  className="root noRefinement"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={true}
        max={20}
        min={480}
        onChange={[Function]}
        placeholder={480}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={true}
        max={20}
        min={480}
        onChange={[Function]}
        placeholder={20}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": true,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput expect to render with values 1`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
        value={20}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
        value={480}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput onChange expect to update the state when max change 1`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
        value={480}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput onChange expect to update the state when min change 1`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
        value={20}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput willReceiveProps expect to update the empty state from given props 1`] = `
<div
  className="root noRefinement"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput willReceiveProps expect to update the empty state from given props 2`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
        value={20}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
        value={480}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput willReceiveProps expect to update the state from given props 1`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
        value={40}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
        value={460}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;

exports[`RangeInput willReceiveProps expect to update the state from given props 2`] = `
<div
  className="root"
>
  <form
    className="form"
    onSubmit={[Function]}
  >
    <label
      className="label"
    >
      <input
        className="input inputMin"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={0}
        step={1}
        type="number"
        value={20}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "separator",
        }
      }
      rootTagName="span"
      templateKey="separatorText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
    <label
      className="label"
    >
      <input
        className="input inputMax"
        disabled={false}
        max={500}
        min={0}
        onChange={[Function]}
        placeholder={500}
        step={1}
        type="number"
        value={480}
      />
    </label>
    <Template
      data={Object {}}
      rootProps={
        Object {
          "className": "submit",
          "disabled": false,
          "type": "submit",
        }
      }
      rootTagName="button"
      templateKey="submitText"
      templates={Object {}}
      templatesConfig={Object {}}
      useCustomCompileOptions={Object {}}
    />
  </form>
</div>
`;
